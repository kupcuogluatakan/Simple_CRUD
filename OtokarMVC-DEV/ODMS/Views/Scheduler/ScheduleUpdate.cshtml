@using ODMSBusiness
@using ODMSCommon.Resources
@using ODMSCommon.Security
@model ODMSModel.Schedule.ScheduleViewModel

@{
    ViewBag.Title = "ScheduleUpdate";
    Layout = "~/Views/Shared/Popup_Layout.cshtml";
}

<style>
    #popupContent {
        width: 1400px;
        padding-top: 10px;
        padding-left: 10px;
        margin: 0;
        background-color: #EDF1F4 !important;
    }

    body {
        background-color: #EDF1F4 !important;
        height: 2000px;
        overflow: hidden;
        width: 2000px;
    }
</style>

<div class="labelDiv">@Html.LabelFor(v => v.OptionValue)</div>
<div class="shortTxtDiv">@Html.Kendo().ComboBoxFor(v => v.OptionValue).DataTextField("Text").DataValueField("Value").BindTo(ViewBag.OptionValueList as List<SelectListItem>).Placeholder(ODMSCommon.Resources.MessageResource.Global_Display_Choose).HtmlAttributes(new { @readonly = "readonly" })</div>
<br />
<br />
@using (Html.BeginForm("ScheduleUpdate", "Scheduler", FormMethod.Post, new { id = "CreateID" }))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(v => v.AppointmentId)
    @Html.HiddenFor(v => v.NonAppId)


    <div class="labelDiv">@Html.LabelFor(v => v.DealerId)</div>
        <div class="shortTxtDiv">@Html.Kendo().ComboBoxFor(v => v.DealerId).Events(e => e.Select("onSelectDealer")).DataTextField("Text").DataValueField("Value").BindTo(ViewBag.DealerList as List<SelectListItem>).Placeholder(ODMSCommon.Resources.MessageResource.Global_Display_Choose).HtmlAttributes(new { @readonly = UserManager.UserInfo.GetUserDealerId() != 0 ? "readonly" : "" })</div>


        <div class="labelDiv">@Html.LabelFor(v => v.AppointmentTypeId)</div>
        <div class="shortTxtDiv">@Html.Kendo().ComboBoxFor(v => v.AppointmentTypeId).DataTextField("Text").DataValueField("Value").BindTo(ViewBag.AppointmentTypeList as List<SelectListItem>).Placeholder(ODMSCommon.Resources.MessageResource.Global_Display_Choose).HtmlAttributes(new { @readonly = Model.StatusId == 2 ? "readonly" : "" }) @Html.ValidationMessageFor(v => v.AppointmentTypeId)</div>

        <div class="labelDiv">@Html.LabelFor(v => v.ComplaintDescription)</div>
        <div class="shortTxtDiv">@Html.TextAreaFor(v => v.ComplaintDescription, new { @style = "resize:none; height:50px", @readonly = Model.StatusId == 2 ? "readonly" : "" })@Html.ValidationMessageFor(v => v.ComplaintDescription)</div>


        <div class="clearDiv">&nbsp;</div>

        <div class="labelDiv">@Html.LabelFor(v => v.AppointmentDate)</div>
        <div class="shortTxtDiv">@Html.Kendo().DatePickerFor(v => v.AppointmentDate).Events(e => e.Open("OpenAppDate")).Format("dd/MM/yyyy").ParseFormats(new[] { "dd.MM.yyyy" }).HtmlAttributes(new { type = "text", @readonly = Model.StatusId == 2 ? "readonly" : "" }) @Html.ValidationMessageFor(v => v.AppointmentDate)</div>

        <div class="labelDiv">@Html.LabelFor(v => v.AppointmentTime)</div>
        <div class="shortTxtDiv">@Html.Kendo().TimePickerFor(v => v.AppointmentTime).Events(e => e.Open("OpanAppTime")).Interval(15).Min(new TimeSpan(8, 0, 0)).Max(new TimeSpan(18, 0, 0)).HtmlAttributes(new { @readonly = Model.StatusId == 2 ? "readonly" : "" }) @Html.ValidationMessageFor(v => v.AppointmentTime)</div>

        <div class="clearDiv">&nbsp;</div>

        <div class="labelDiv">@Html.LabelFor(v => v.DeliveryEstimateDate)</div>
        <div class="shortTxtDiv">@Html.Kendo().DatePickerFor(v => v.DeliveryEstimateDate).Events(e => e.Open("OpenDeliveryDate")).Format("dd/MM/yyyy").ParseFormats(new[] { "dd.MM.yyyy" }).HtmlAttributes(new { type = "text", @readonly = Model.StatusId == 2 ? "readonly" : "" })@Html.ValidationMessageFor(v => v.AppointmentDate)</div>

        <div class="labelDiv">@Html.LabelFor(v => v.DeliveryEstimateTime)</div>
        <div class="shortTxtDiv">@Html.Kendo().TimePickerFor(v => v.DeliveryEstimateTime).Events(e => e.Open("OpenDeliveryDate")).Interval(15).Min(new TimeSpan(8, 0, 0)).Max(new TimeSpan(18, 0, 0)).HtmlAttributes(new { @readonly = Model.StatusId == 2 ? "readonly" : "" })</div>

        <div class="clearDiv">&nbsp;</div>
        <div class="labelDiv">@Html.LabelFor(v => v.VehicleId)</div>
        <div class="shortTxtDivObjectSearch">@Html.Partial("~/Views/ObjectSearch/ObjectSearch.cshtml", new ODMSModel.ObjectSearch.ObjectSearchModel { ObjectSearchType = CommonValues.ObjectSearchType.Vehicle, WindowTitle = ODMSCommon.Resources.MessageResource.ObjectSearch_WindowTitle_Vehicle, ReferenceObjectId = "VehicleId", ClearCallBackFunction = "ClearVehicleChange", SelectCallBackFunction = "SetVehicleChange", Required = false, ReferenceObjectValue = Model == null ? null : Model.VehicleId, ReferenceObjectText = Model == null ? null : Model.VehiclePlate + " - " + Model.VehicleVin, ParentWindowId = "modelWindow" })</div>
        <div class="labelDiv">@Html.LabelFor(v => v.VehiclePlate)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.VehiclePlate, new { @onkeyup = "InputToUpperWithoutWhiteSpace(this);", @readonly = Model.StatusId == 2 ? "readonly" : "" })@Html.ValidationMessageFor(v => v.VehiclePlate)</div>


        <div class="labelDiv">@Html.LabelFor(v => v.VehicleVin)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.VehicleVin, new { @readonly = "readonly" })</div>

        <div class="clearDiv">&nbsp;</div>
        <div class="labelDiv">@Html.LabelFor(v => v.VehicleModelCode)</div>
        <div class="shortTxtDiv">@Html.Kendo().ComboBoxFor(v => v.VehicleModelCode).DataTextField("Text").DataValueField("Value").BindTo(ViewBag.VehicleModelList as List<SelectListItem>).Placeholder(ODMSCommon.Resources.MessageResource.Global_Display_Choose).HtmlAttributes(new { @readonly = Model.StatusId == 2 ? "readonly" : "" })</div>
        <div class="labelDiv">@Html.LabelFor(v => v.VehicleType)</div>
        <div class="shortTxtDiv">
            @Html.Kendo().ComboBoxFor(v => v.VehicleType).DataValueField("Value").DataTextField("Text").HtmlAttributes(new { @readonly = Model.StatusId == 2 ? "readonly" : "" }).Placeholder(MessageResource.Global_Display_Choose).DataSource(source => source.Read(read => read.Action("ListVehicleTypes", "Appointment")
                                                                                                                                                                                                                              .Data("GetVehicleModelCode"))
                                                                                                                                                                                                            .ServerFiltering(true)).AutoBind(false).CascadeFrom("VehicleModelCode")
        </div>
        <div class="labelDiv">@Html.LabelFor(v => v.VehicleColor)</div>

        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.VehicleColor, new { @readonly = Model.StatusId == 2 ? "readonly" : "" }) @Html.ValidationMessageFor(v => v.VehicleColor)</div>

        <div class="clearDiv">&nbsp;</div>
        <div class="clearDiv">&nbsp;</div>
        <div class="clearDiv">&nbsp;</div>

        <div class="labelDiv">@Html.LabelFor(v => v.CustomerId)</div>
        <div class="shortTxtDivObjectSearch">@Html.Partial("~/Views/ObjectSearch/ObjectSearch.cshtml", new ODMSModel.ObjectSearch.ObjectSearchModel { ObjectSearchType = CommonValues.ObjectSearchType.Customer, WindowTitle = ODMSCommon.Resources.MessageResource.ObjectSearch_WindowTitle_Customer, ReferenceObjectId = "CustomerId", ClearCallBackFunction = "ClearCustomerChange", SelectCallBackFunction = "SetCustomerChange", Required = false, ReferenceObjectValue = Model == null ? null : Model.CustomerId, ParentWindowId = "modelWindow" })</div>
        <div class="labelDiv">@Html.LabelFor(v => v.ContactFirstName)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.ContactFirstName, new { @class = "clssCustomer", @readonly = Model.StatusId == 2 ? "readonly" : "" }) @Html.ValidationMessageFor(v => v.ContactFirstName)</div>
        <div class="labelDiv">@Html.LabelFor(v => v.ContactLastName)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.ContactLastName, new { @class = "clssCustomer", @readonly = Model.StatusId == 2 ? "readonly" : "" }) @Html.ValidationMessageFor(v => v.ContactLastName)</div>

        <div class="clearDiv">&nbsp;</div>

        <div class="labelDiv">@Html.LabelFor(v => v.ContactPhone)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.ContactPhone, new { @class = "clssCustomer", @readonly = Model.StatusId == 2 ? "readonly" : "" })@Html.ValidationMessageFor(v => v.ContactPhone)</div>
        <div class="labelDiv">@Html.LabelFor(v => v.ContactAddress)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.ContactAddress, new { @class = "clssCustomer", @readonly = Model.StatusId == 2 ? "readonly" : "" })@Html.ValidationMessageFor(v => v.ContactAddress)</div>

        <div class="labelDiv">@Html.LabelFor(v => v.StatusId)</div>
        <div class="shortTxtDiv">@Html.Kendo().ComboBoxFor(v => v.StatusId).DataTextField("Text").DataValueField("Value").BindTo(ViewBag.AppointmentStatusList as List<SelectListItem>).Placeholder(MessageResource.Global_Display_Choose).HtmlAttributes(new { @readonly = Model.StatusId == 2 ? "readonly" : "" })</div>

        <div class="clearDiv">&nbsp;</div>
        if (Model.StatusId != 2)
        {
            @ODMSHelpers.Button("CreateID", CommonUtility.GetResourceValue("Global_Display_Update"), string.Empty, "ScheduleUpdate")
        }
}

@using (Html.BeginForm("ScheduleUpdate", "Scheduler", FormMethod.Post, new { id = "UnCreateID" }))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(v => v.AppointmentId)
    @Html.HiddenFor(v => v.StatusId)
    @Html.HiddenFor(v => v.NonAppId)

    <table>
        <tr>
            <td>
                <div class="labelDiv">@Html.LabelFor(v => v.AppointmentStartDate)</div>
                <div class="shortTxtDiv">@Html.Kendo().DatePickerFor(v => v.AppointmentStartDate).Format("dd/MM/yyyy").ParseFormats(new[] { "dd.MM.yyyy" }).HtmlAttributes(new { type = "text" })@Html.ValidationMessageFor(v => v.AppointmentStartDate)</div>
            </td>
            <td>
                <div class="labelDiv">@Html.LabelFor(v => v.AppointmentStartTime)</div>
                <div class="shortTxtDiv">@Html.Kendo().TimePickerFor(v => v.AppointmentStartTime).Format("H:mm")@Html.ValidationMessageFor(v => v.AppointmentStartTime)</div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="labelDiv">@Html.LabelFor(v => v.AppointmentEndDate)</div>
                <div class="shortTxtDiv">@Html.Kendo().DatePickerFor(v => v.AppointmentEndDate).Format("dd/MM/yyyy").ParseFormats(new[] { "dd.MM.yyyy" }).HtmlAttributes(new { type = "text" })@Html.ValidationMessageFor(v => v.AppointmentEndDate)</div>
            </td>
            <td>
                <div class="labelDiv">@Html.LabelFor(v => v.AppointmentEndTime)</div>
                <div class="shortTxtDiv">@Html.Kendo().TimePickerFor(v => v.AppointmentEndTime).Format("H:mm")@Html.ValidationMessageFor(v => v.AppointmentEndTime)</div>
            </td>
        </tr>
    </table>

        @ODMSHelpers.Button("UnCreateID", CommonUtility.GetResourceValue("Global_Display_Update"), string.Empty, "ScheduleUpdate")
}

<script src="~/Scripts/jquery.maskedinput.js"></script>
<script src="~/Scripts/odms.objectsearch.js"></script>

<script type="text/javascript">

    var optionValue = $("input[name*='OptionValue']").val();
    var dealerId = "@UserManager.UserInfo.GetUserDealerId()";


    function onSelect(e) {
        var dataItem = this.dataItem(e.item.index());
        optionValue = dataItem.Value;

        if (optionValue == "@((int)ODMSModel.Schedule.SchedulerOptionValue.Appointment)") {
            $("#UnCreateID").hide();
            $("#CreateID").show();
        } else {
            $("#UnCreateID").show();
            $("#CreateID").hide();
        }

        var token = $('input[name="__RequestVerificationToken"]').val();

        $.ajax({
            type: "POST",
            url: "@Url.Action("SetParameter", "Scheduler")",
            data: { optionValue: optionValue, dealerId: dealerId, "__RequestVerificationToken": token },
            traditional: true,
            success: function () { },
            dataType: "json"
        });
    }

    function onSelectDealer(e) {
        var dataItem = this.dataItem(e.item.index());
        dealerId = dataItem.Value;
        var token = $('input[name="__RequestVerificationToken"]').val();

        $.ajax({
            type: "POST",
            url: "@Url.Action("SetParameter", "Scheduler")",
            data: { optionValue: optionValue, dealerId: dealerId, "__RequestVerificationToken": token },
            traditional: true,
            success: function () { },
            dataType: "json"
        });
    }

    function OpenAppDate() {
        var date = $("#AppointmentDate").data("kendoDatePicker");
        date.min(new Date($.now()));
    }

    function OpanAppTime() {
        var date = $("#AppointmentDate").data("kendoDatePicker");
        var time = $("#AppointmentTime").data("kendoTimePicker");
        if (date.value() < new Date($.now()).setHours(new Date($.now()).getHours() + 20)) {
            time.min(new Date(2000, 0, 1, new Date($.now()).getHours() + 1, 0, 0));
        } else {
            time.min(new Date(2000, 0, 1, 8, 0, 0));
        }
    }

    function OpenDeliveryDate() {
        var deliveryDate = $("#DeliveryEstimateDate").data("kendoDatePicker");
        var deliveryTime = $("#DeliveryEstimateTime").data("kendoTimePicker");

        var appTime = $("#AppointmentTime").data("kendoTimePicker");
        var appDate = $("#AppointmentDate").data("kendoDatePicker");

        if (appDate.value()) {
            deliveryDate.min(appDate.value());
        } else {
            deliveryDate.min(new Date($.now()));
        }

        if (appDate.value() != null && deliveryDate.value() != null) {
            if (appDate.value().toString() == deliveryDate.value().toString()) {

                deliveryTime.min(appTime.value());
            }
            else {
                deliveryTime.min(new Date(2000, 0, 1, 8, 0, 0));
            }
        } else {
            deliveryTime.min(new Date(2000, 0, 1, 8, 0, 0));
        }

    }



    function GetVehicleModelCode() {
        return {
            vehicleModelCode: $('#VehicleModelCode').val()
        };
    }

    $(document).ready(function () {
        SetVehicleChange();
        $('form').each(function () {
            var validator = $(this).data('validator');
            if (validator && validator.settings) {
                validator.settings.ignore = "";
            }
        });

        $("#ContactPhone").mask("(999) 999 99 99", { placeholder: " " });


        if (optionValue == "@((int)ODMSModel.Schedule.SchedulerOptionValue.Appointment)") {
            $("#CreateID").show();
            $("#UnCreateID").hide();
        } else {
            $("#UnCreateID").show();
            $("#CreateID").hide();
        }

        var token = $('input[name="__RequestVerificationToken"]').val();

        $.ajax({
            type: "POST",
            url: "@Url.Action("SetParameter", "Scheduler")",
            data: { optionValue: optionValue, dealerId: dealerId, "__RequestVerificationToken": token },
            traditional: true,
            success: function () { },
            dataType: "json"
        });

        if(@Model.StatusId == 2)
        {
            $("#CustomerIdSearch").hide();
            $("#CustomerIdClear").hide();
            $("#VehicleIdSearch").hide();
            $("#VehicleIdClear").hide();
        }
    });
    function SetVehicleChange() {

        var vehiclePlate = $("#VehicleIdTextContainer").val();

        if (vehiclePlate) {
            var token = $('input[name="__RequestVerificationToken"]').val();

            $.ajax({
                type: "POST",
                url: "@Url.Action("GetAppointmentVehicleInfo", "Appointment")",
                data: { vehicleId: $("#VehicleId").val(), appointmentId: $("#AppointmentId").val(), "__RequestVerificationToken": token },
                traditional: true,
                success: function (result) {
                    $("#VehicleModelCode").data("kendoComboBox").text(result.Model);
                    $("#VehicleType").data("kendoComboBox").text(result.Type);
                    $("#VehicleColor").val(result.VehicleColor);
                    $("#VehicleVin").val(result.Vin);
                    $("#VehicleIdTextContainer").val(result.Vin);
                    $("#VehiclePlate").val(result.Plate);
                    SetCustomerChange();
                },
                dataType: "json"
            });

        }
    }

    function ClearVehicleChange() {
        $("#VehicleModelCode").data("kendoComboBox").text('');
        $("#VehiclePlate").val('');
        $("#VehicleVin").val('');
        $("#VehicleColor").val('');
    }

    function ClearCustomerChange() {
        $("#ContactName").val('');
        $("#ContactFirstName").val('');
        $("#ContactLastName").val('');
        $("#ContactPhone").val('');
        $("#ContactAddress").val('');
        $("#CustomerIdTextContainer").val('');
    }

    function SetCustomerChange() {
        ClearCustomerChange();
        var token = $('input[name="__RequestVerificationToken"]').val();

        if (customerId != 0) {
            var customerId = $("#CustomerId").val();
            var appointmentId = @(Model!=null?Model.AppointmentId:0);
            $.ajax({
                type: "POST",
                url: "@Url.Action("GetAppointmentCustomer", "Appointment")",
                data: { customerId: customerId, appointmentId: appointmentId, "__RequestVerificationToken": token },
                traditional: true,
                success: function (result) {
                    $("#ContactName").val(result.Name);
                    $("#ContactFirstName").val(result.FName);
                    $("#ContactLastName").val(result.LName);
                    $("#ContactPhone").val(result.Phone);
                    $("#ContactAddress").val(result.Address);
                    $("#CustomerIdTextContainer").val(result.Name);
                },
                dataType: "json"
            });
        }
    }

</script>
