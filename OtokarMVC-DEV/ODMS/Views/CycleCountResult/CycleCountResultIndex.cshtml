@using ODMSCommon.Resources
@model ODMSModel.CycleCountResult.CycleCountResultListModel
<br />
@if (ViewBag.CycleCountStatus == (int)ODMSCommon.CommonValues.CycleCountStatus.Started)
{
    @ODMSHelpers.LinkButton("btnCreate", CommonUtility.GetResourceValue("CycleCountResult_Display_Create"), "Create", "modalClickCycleCountResult createNewCycleCountResult", CommonUtility.GetResourceValue("CycleCountResult_PageTitle_Create"), CommonValues.PermissionCodes.CycleCountResult.CycleCountResultCreate)
    @ODMSHelpers.Button("btnSave", CommonUtility.GetResourceValue("CycleCountResult_Display_Save"), CommonValues.PermissionCodes.CycleCountResult.CycleCountResultIndex, "CycleCountResultIndex", "SaveChanges();")
    @ODMSHelpers.Button("btnSaveAndSendApprove", CommonUtility.GetResourceValue("CycleCountResult_Display_SaveAndSendApprove"), CommonValues.PermissionCodes.CycleCountResult.CycleCountResultSaveAndSendApprove, "CycleCountResultSaveAndSendApprove", "SaveChangesAndSendForApproval();")
}
@Html.ExportExcelButton(new ExcelExportDto("CycleCountResult", "ListCycleCountResult", "CycleCountSearch", "sdfsdf", "CycleCountResult").Build<ODMSModel.CycleCountResult.CycleCountResultListModel, object>(
    c => c.WarehouseName, c => c.RackName, c => c.PartCode, c => c.StockCardName, c => c.BeforeCampaignCountQuantity, c => c.BeforeFreeOfChargeCountQuantity, c => c.BeforePaidCountQuantity,/*c => c.BeforeCountQuantity, */c => c.AfterCountQuantityNonNull))

<style>
    .bnd0 {
        background: lightgrey;
        /*text-align: center;*/
        margin: -7px;
        padding: 5px;
    }
    .bnd1 {
        background: red;
        color: white;
        font-weight: bold;
        /*text-align: center;*/
        margin: -7px;
        padding: 5px;
    }
</style>

<div id="CycleCountResultModelWindowDiv">
    @(Html.Kendo().Window()
        .Name("CycleCountResultModelWindow")
     .Draggable()
    .Resizable()
    .Width(950)
    .Height(440)
    .Visible(false)
    .Modal(true)
    .Iframe(true)
    .Events(ev => ev.Close(@"function(e){
         var grid = $('#CycleCountResultGrid').data('kendoGrid');
        grid.dataSource.page(1);
    }"))
    )
</div>
<script>

    function CycleCountSearch() {
        return {
            CycleCountId : "@Model.CycleCountId"
        };
    }
    $(document).ready(function () {

        $("body").delegate(".modalClickCycleCountResult", "click", function (e) {
            $('#CycleCountResultModelWindow').html('');
            e.preventDefault();

            var link;
            var clickedId = $(this).attr("id");
            var frameTitle = $(this).attr("frameTitle");
            if ($(this).hasClass("createNewCycleCountResult")) {
                link = "@Url.Action("CycleCountResultCreate", "CycleCountResult", new { cycleCountId = Model.CycleCountId })";
            }
            $("#CycleCountResultModelWindow_wnd_title").html(frameTitle);

            var windowWidget = $("#CycleCountResultModelWindow").data("kendoWindow");
            var closeOrigin = windowWidget.close;

            windowWidget.refresh({
                url: link
            }).center();
            windowWidget.center();
            windowWidget.open();

        });

    });

    function SaveChanges() {
        var grid = $("#CycleCountResultGrid").data("kendoGrid");
        if (grid.dataSource.hasChanges()) {
            var list = grid.dataSource.data();
            for (var i = 0; i < list.length; i++) {
                console.log(list[i]);
                if (list[i].AfterCountQuantityNonNull != null && list[i].AfterCountQuantityNonNull >= 0) {
                    var truncValue = Math.floor(list[i].AfterCountQuantityNonNull);
                    if (truncValue.toString().length > 4) {
                        @{
                            string message = string.Format(MessageResource.Validation_IntegerLength, 4);
                        }
                        SetErrorMessage('@message');
                        return false;
                    }
                }
            }

            grid.saveChanges();
            SetSuccessMessage('@MessageResource.Global_Display_Success');

            var grid = $("#CycleCountResultGrid").data("kendoGrid");
            setTimeout(function () { grid.dataSource.read(); }, 200);
            

        }
    }

    function SaveChangesAndSendForApproval() {
        var isValid = true;
        var grid = $("#CycleCountResultGrid").data("kendoGrid");
        var list = grid.dataSource.data();
        for (var i = 0; i < list.length; i++) {
            if (list[i].AfterCountQuantityNonNull == null || list[i].AfterCountQuantityNonNull < 0)
                isValid = false;
        }
        if (isValid) {
            SaveChanges();
            setTimeout(function () {
                  $.ajax({
                type: "POST",
                url: "@Url.Action("CycleCountResultSendApproval", "CycleCountResult")",
                data: { cycleCountId: @Model.CycleCountId },
                traditional: true,
                success: function(result) {
                    window.location.replace(window.location.href);
                    SetSuccessMessage('@MessageResource.Global_Display_Success');
                },
                dataType: "json"
            });
            }, 500);
        }
        else {
            SetErrorMessage('@MessageResource.CycleCountResult_Warning_EmptyAfterCountQuantity');
        }
    }

    function OnDatabound2(aQty) {
        var culture = "@System.Threading.Thread.CurrentThread.CurrentUICulture.ToString()";
        if (culture == "tr-TR") aQty = aQty.toString().replace(".", ",");
        return aQty;
    }

    
     function OnDatabound3(aQty) {
        var culture = "@System.Threading.Thread.CurrentThread.CurrentUICulture.ToString()";
        if (culture == "tr-TR") aQty = aQty.toString().replace(".", ",");
         return aQty == 0 ? ("<div class='bnd0'>" + aQty + " </div>") :
             ( "<div class='bnd1'>" + aQty + " </div>" );
    }

    function OnDatabound(aQty) {
        if (aQty == null || aQty < 0) {
            return "<div style='background: lightgray'>" + '@MessageResource.Global_Display_Enter' + " </div>";
        }
        else {
            var culture = "@System.Threading.Thread.CurrentThread.CurrentUICulture.ToString()";
            if (culture == "tr-TR") aQty = aQty.toString().replace(".", ",");
            return aQty;
        }
    }

    function OnGridBound(e) {
        var grid = $("#CycleCountResultGrid").data("kendoGrid");
        var list = grid.dataSource._data;
        for (var i = 0; i < list.length; i++) {
            if(list[i].AfterCountQuantityNonNull < 0)
                list[i].AfterCountQuantityNonNull = null;
        }
    }
    function DeletePart(Id) {

           var token = $('input[name="__RequestVerificationToken"]').val();

        CustomConfirm(function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteCycleResult", "CycleCountResult")",
                data: { cycleResultId: Id, cycleCountId: @Model.CycleCountId,"__RequestVerificationToken": token },
                traditional: true,
                success: function (result) {

                    console.log(result);
                    if (result.Status == 0)
                        SetErrorMessage(result.Message);
                    else {
                        var grid = $('#CycleCountResultGrid').data('kendoGrid');
                        setTimeout(function () { grid.dataSource.read(); }, 200);
                        SetSuccessMessage('@MessageResource.Global_Display_Success');
                    }
                },
                dataType: "json"
            });
        }, "@MessageResource.SparePartSale_Display_Collect", "@MessageResource.CycleCountResult_Display_CollectConfirm", "@MessageResource.Global_Display_Yes", "@MessageResource.Global_Display_No");

    }

</script>
@if (ViewBag.CycleCountStatus == (int)CommonValues.CycleCountStatus.Started)
{
    <div class="col-md-12">
        <div class="col-md-offset-9 col-md-3" style="padding:5px 5px;margin-top:-45px!important; margin-right: 45px">
            <div style="border:1px dashed #808080;margin-right:45px">
                <h4>@Html.Raw(MessageResource.Global_Display_UploadFromExcel) </h4>
                <div class="labelDiv" style="width:80px;float:left;">@MessageResource.Global_Display_SampleFile </div>
                <div>
                    <a class="k-link2" href="@Url.Action("ExcelSample")">
                        <img class=iconLink src='@Url.Content("~/Images/excelSample.png")' title='@MessageResource.Global_Display_SampleFile'>
                    </a>
                    <br />
                    @using (Html.BeginForm("CycleCountResultImportFromExcel", "CycleCount", FormMethod.Post))
                {
                        @Html.HiddenFor(model => model.CycleCountId)
                        @Html.Kendo().Upload().Name("excelFile").Events(e => e.Select("onSelect")).TemplateId("fileTemplate").Multiple(false).Messages(m => m.Select(MessageResource.Global_Display_SelectFile))
                        <div id="divExcepUpload">
                            @ODMSHelpers.Button("Upload", CommonUtility.GetResourceValue("Global_Display_UploadFromExcel"), "", "UploadExcel")
                        </div>
                    }
                </div>
            </div>
        </div>

    </div>
}

<div class="kendoGridDiv" id="grd">
    @(Html.Kendo().Grid<ODMSModel.CycleCountResult.CycleCountResultListModel>()
              .Name("CycleCountResultGrid")

              .Columns(columns =>
              {
                  columns.Bound(p => p.IS_ONRACK).ClientTemplate("#if(IS_ONRACK==0){#" +
                  "<center><a href='javascript:void(0);' frameTitle='"
                  + MessageResource.SparePartSale_Display_Collect +
                  "' onclick='DeletePart(#=CycleCountResultId#);'><img class='iconLink' style=\"width:20px; height:20px;\" src='" +
                  Url.Content("~/Images/delete.png") +
                  "'/></a></center>#}else{#" + "<span></span>" + "#}#").Title("İşlem").Width(40).Sortable(false).Visible(ODMSHelpers.UserHasPermission(CommonValues.PermissionCodes.SparePartSale.SparePartSaleCollect) && ViewBag.CycleCountStatus == (int)CommonValues.CycleCountStatus.Started);

                  columns.Bound(p => p.WarehouseName).Width(100).Sortable(true);
                  columns.Bound(p => p.RackName).Width(100).Sortable(true);
                  columns.Bound(p => p.PartCode).Width(100).Sortable(true);
                  columns.Bound(p => p.StockCardName).Width(100).Sortable(true);
                  columns.Bound(p => p.BeforeCampaignCountQuantity).Width(100).Sortable(true).Visible(ViewBag.DisplayCurrentAmount).ClientTemplate("#= OnDatabound3(BeforeCampaignCountQuantity)#");
                  columns.Bound(p => p.BeforeFreeOfChargeCountQuantity).Width(100).Sortable(true).Visible(ViewBag.DisplayCurrentAmount).ClientTemplate("#= OnDatabound3(BeforeFreeOfChargeCountQuantity)#");
                  columns.Bound(p => p.BeforePaidCountQuantity).Width(100).Sortable(true).Visible(ViewBag.DisplayCurrentAmount).ClientTemplate("#= OnDatabound2(BeforePaidCountQuantity)#");
                  // columns.Bound(p => p.BeforeCountQuantity).Width(100).Sortable(true).Visible(ViewBag.DisplayCurrentAmount).ClientTemplate("#= OnDatabound2(BeforeCountQuantity)#");
                  columns.Bound(p => p.AfterCountQuantityNonNull).Width(100).Sortable(true).ClientTemplate("#= OnDatabound(AfterCountQuantityNonNull)#").EditorTemplateName("DecimalNumericTextbox").Format("{0:N2}").HtmlAttributes(new { @class = "editableValues" });
              })
              .Sortable()
              .Scrollable()
              .Editable(editable => editable.Mode(GridEditMode.InCell))
              .Events(e => e.DataBound("OnGridBound"))
              .DataSource(dataSource => dataSource
                                            .Ajax()
                                            .Batch(true)
                                            .Read(read => read.Action("ListCycleCountResult", "CycleCountResult", Model))
                                            .Model(
                                            model =>
                                            {

                                                model.Field(p => p.IS_ONRACK).Editable(false);
                                                model.Id(p => p.CycleCountResultId);
                                                model.Field(p => p.WarehouseName).Editable(false);
                                                model.Field(p => p.RackName).Editable(false);
                                                model.Field(p => p.StockCardName).Editable(false);
                                                model.Field(p => p.PartCode).Editable(false);
                                                model.Field(p => p.BeforeFreeOfChargeCountQuantity).Editable(false);
                                                model.Field(p => p.BeforePaidCountQuantity).Editable(false);
                                                model.Field(p => p.BeforeCampaignCountQuantity).Editable(false);
                                                // model.Field(p => p.BeforeCountQuantity).Editable(false);
                                                model.Field(p => p.AfterCountQuantity).Editable(false);
                                                model.Field(p => p.AfterCountQuantityNonNull).Editable(true);
                                            })
                                            .Update(update => update.Action("CycleCountResultSave", "CycleCountResult").Type(HttpVerbs.Post))))
</div>
