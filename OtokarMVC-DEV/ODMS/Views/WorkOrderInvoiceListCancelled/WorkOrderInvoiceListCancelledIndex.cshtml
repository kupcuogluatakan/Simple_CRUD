@using ODMSCommon.Resources

@model ODMSModel.WorkOrderInvoiceList.WorkOrderInvoiceListListModel

@{
    ViewBag.Title = MessageResource.WorkOrderInvoiceListCancelled_PageTitle_Index;
}
@Html.AntiForgeryToken()
<div id="showSearch">@MessageResource.Global_Display_Search_Criteria</div>
<div id="searchDiv">
    <div id="searchFields">
        <div class="labelDiv">@Html.LabelFor(v => v.StartDate)</div>
        <div class="shortTxtDiv">@Html.Kendo().DatePickerFor(v => v.StartDate).Events(e => e.Open("OpenStartDate").Change("OpenEndDate")).Format("dd/MM/yyyy").ParseFormats(new[] { "dd.MM.yyyy" }).HtmlAttributes(new { type = "text", onkeypress = "return false;" })</div>

        <div class="labelDiv">@Html.LabelFor(v => v.EndDate)</div>
        <div class="shortTxtDiv">@Html.Kendo().DatePickerFor(v => v.EndDate).Events(e => e.Open("OpenEndDate").Change("OpenStartDate")).Format("dd/MM/yyyy").ParseFormats(new[] { "dd.MM.yyyy" }).HtmlAttributes(new { type = "text", onkeypress = "return false;" })</div>

        <div class="labelDiv">@Html.LabelFor(v => v.InvoiceNo)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.InvoiceNo, new { @onkeyup = "InputToUpperWithoutWhiteSpace(this);" }) </div>

        <div class="labelDiv">@Html.LabelFor(v => v.IdWorkOrder)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(c => c.IdWorkOrder, new { @Value = "", @type = "number", @class = "proposalNumber", @min = "0" }) </div>

        <div class="clearDiv">&nbsp;</div>

        <div class="labelDiv">@Html.LabelFor(v => v.Plate)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.Plate, new { @onkeyup = "InputToUpperWithoutWhiteSpace(this);" }) </div>

        <div class="labelDiv">@Html.LabelFor(v => v.CustomerName)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.CustomerName) </div>

        <div class="labelDiv">@Html.LabelFor(v => v.TaxNo)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.TaxNo, new { @onkeyup = "InputToUpperWithoutWhiteSpace(this);" }) </div>

        <div class="labelDiv">@Html.LabelFor(v => v.TCNo)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.TCNo, new { @onkeyup = "InputToUpperWithoutWhiteSpace(this);" }) </div>

        <div class="clearDiv">&nbsp;</div>
    </div>
    <br />
</div>

@ODMSHelpers.LinkButton("btnSearch", MessageResource.Global_Display_Search, "", "", "", CommonValues.PermissionCodes.WorkOrderInvoiceList.WorkOrderInvoiceListIndex)

<br />
<div id="WorkOrderInvoiceListModelWindowDiv">
    @(Html.Kendo().Window()
        .Name("WorkOrderInvoiceListModelWindow")
     .Draggable()
    .Resizable()
    .Width(950)//.Width(950)
    .Height(350)//.Height(440)
    .Visible(false)
    .Modal(true)
    .Iframe(true)
    .Events(ev => ev.Close(@"function(e){
         var grid = $('#WorkOrderInvoiceListGrid').data('kendoGrid');
        grid.dataSource.page(1);
    }"))
    )
</div>

<script src="~/Scripts/jquery.maskedinput.js"></script>

<script type="text/javascript">

    function OpenStartDate() {
        var dateStart = $("#StartDate").data("kendoDatePicker");
        var dateEnd = $("#EndDate").data("kendoDatePicker");
        if ($("#EndDate").val()) {
            dateStart.max(dateEnd.value());
        } else {
            dateStart.max(new Date(3000, 0, 1));
        }
    }

    function OpenEndDate() {
        var dateStart = $("#StartDate").data("kendoDatePicker");
        var dateEnd = $("#EndDate").data("kendoDatePicker");
        if ($("#StartDate").val()) {
            dateEnd.min(dateStart.value());
        } else {
            dateEnd.min(new Date(1900, 0, 1));
        }
    }

    @*function DeleteWorkOrderInvoiceList(obj, idWorkOrderInv, idWorkOrder) {
        var token = $('input[name="__RequestVerificationToken"]').val();

       // DeleteConfirm(function () {
            CustomConfirm(function () {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("DeleteWorkOrderInvoiceList", "WorkOrderInvoiceList")",
                    data: { IdWorkOrderInv: idWorkOrderInv, IdWorkOrder: idWorkOrder, "__RequestVerificationToken": token },
                    traditional: true,
                    success: function (result) {
                        if (result.Status == 0)
                            SetErrorMessage(result.Message);
                        else {
                            var grid = $('#WorkOrderInvoiceListGrid').data('kendoGrid');
                            grid.dataSource.read();
                            SetSuccessMessage(result.Message);
                        }
                    },
                    dataType: "json"
                });

            }, "@MessageResource.Global_Display_CancelConfirmTitle", "@MessageResource.WorkOrderInvoiceList_Display_CancelMessage", "@MessageResource.Global_Display_Yes", "@MessageResource.Global_Display_No");
           // });
        
    }*@

    //function ShowPopup(frameTitle, link) {
    //    $("#WorkOrderInvoiceListModelWindow_wnd_title").html(frameTitle);

    //    var windowWidget = $("#WorkOrderInvoiceListModelWindow").data("kendoWindow");
    //    var closeOrigin = windowWidget.close;

    //    windowWidget.refresh({
    //        url: link
    //    }).center();
    //    windowWidget.center();
    //    windowWidget.open();
    //    $('.k-overlay').unbind('click');
    //    $('.k-overlay').click(function () {
    //        var popup = $("#WorkOrderInvoiceListModelWindow").data("kendoWindow");
    //        if (popup)
    //            popup.close();
    //        $('#WorkOrderInvoiceListModelWindow').html('');
    //    });
    //}

    $(document).ready(init);
    function WorkOrderInvoiceListSearch() {
        return {
            StartDate: $('#StartDate').val(),
            EndDate: $('#EndDate').val(),
            Plate: $('#Plate').val(),
            CustomerName: $('#CustomerName').val(),
            TaxNo: $('#TaxNo').val(),
            IdWorkOrder: $('#IdWorkOrder').val(),
            InvoiceNo: $('#InvoiceNo').val(),
            TCNo: $('#TCNo').val()
        };
    }
    function init() {

        $("body").delegate("#btnSearch", "click", function (e) {
            var grid = $('#WorkOrderInvoiceListGrid').data('kendoGrid');
            grid.dataSource.page(1);

        });
        $("body").delegate("#showSearch", "click", function (e) {
            var IsVisible = Boolean($(this).hasClass("searchVisible"));

            if (!IsVisible) {
                $(this).html('@MessageResource.Global_Display_Hide_Search_Criteria');
                $(this).addClass("searchVisible");
                $("#searchDiv").show("slow");
            }
            else {
                $(this).html("@MessageResource.Global_Display_Search_Criteria");
                $(this).removeClass("searchVisible");
                $("#searchDiv").hide("slow");
            }
        });
        //$("body").delegate(".modalClick", "click", function (e) {
        //    $('#WorkOrderInvoiceListModelWindow').html('');
        //    e.preventDefault();

        //    var link;
        //    var clickedId = $(this).attr("idCustomer");
        //    var clickedDealerId = $(this).attr("idDealer");
        //    var frameTitle = $(this).attr("frameTitle");

        //    $("#WorkOrderInvoiceListModelWindow_wnd_title").html(frameTitle);

        //    var windowWidget = $("#WorkOrderInvoiceListModelWindow").data("kendoWindow");
        //    var closeOrigin = windowWidget.close;

        //    windowWidget.refresh({
        //        url: link
        //    }).center();
        //    windowWidget.center();
        //    windowWidget.open();
        //    $('.k-overlay').unbind('click');
        //    $('.k-overlay').click(function () {
        //        var popup = $("#WorkOrderInvoiceListModelWindow").data("kendoWindow");
        //        if (popup)
        //            popup.close();
        //        $('#WorkOrderInvoiceListModelWindow').html('');
        //    });
        //});

    }
</script>

<div class="kendoGridDiv" id="grd">
    @(Html.Kendo().Grid<ODMSModel.WorkOrderInvoiceList.WorkOrderInvoiceListListModel>()
          .Name("WorkOrderInvoiceListGrid")
          .Columns(columns =>
          {
              //columns.Bound(p => p.IdWorkOrderInv).ClientTemplate("<center><a href='javascript:void(0);' frameTitle='" + CommonUtility.GetResourceValue("WorkOrderInvoiceList_PageTitle_Delete") + "' onclick='DeleteWorkOrderInvoiceList(this,#=IdWorkOrderInv#, #=IdWorkOrder#);'><img class='iconLink' style=\"width:20px; height:20px;\" src='" + Url.Content("~/Images/remove.png") + "' /></a></center>").Title(CommonUtility.GetResourceValue("Global_Display_Cancel")).Width(60).Sortable(false).Visible(ODMSHelpers.UserHasPermission(CommonValues.PermissionCodes.WorkOrderInvoiceList.WorkOrderInvoiceListDelete));
              columns.Bound(p => p.TCNo).Sortable(true);
              columns.Bound(p => p.TaxNo).Sortable(true);
              columns.Bound(p => p.CustomerName).Sortable(true);
              columns.Bound(p => p.CustomerLastName).Sortable(true);
              columns.Bound(p => p.Plate).Sortable(true);
              columns.Bound(p => p.IdWorkOrder).Sortable(true);
              columns.Bound(p => p.InvoiceNo).Sortable(true);
              columns.Bound(p => p.InvoiceDate).Sortable(true).Format("{0:dd/MM/yyyy}");
              columns.Bound(p => p.TotalAmount).Sortable(true);
              columns.Bound(p => p.VatAmount).Sortable(true);
              columns.Bound(p => p.GeneralAmount).Sortable(true);
          })
          .Pageable()
          .Sortable()
          .Scrollable()

          .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .PageSize(10)
                                        .ServerOperation(true)
                                        .Read(read => read.Action("ListWorkOrderInvoiceListCancelled", "WorkOrderInvoiceListCancelled", Model).Data("WorkOrderInvoiceListSearch"))
                                        .Model(model => model.Field(o => o.IdCustomer).DefaultValue(-1)))

          )
</div>