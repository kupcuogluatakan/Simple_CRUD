@model ODMSModel.ObjectSearch.AppointmentSearchViewModel

@{
    Layout = "~/Views/Shared/Popup_Layout.cshtml";
}

@helper DynamicBodySize()
{
    @Html.Raw(string.Format("<style> #bodyContainer {{ height: {0}px; width: {1}px; }}</style>", "490", "1330"))
}

@DynamicBodySize()


<div id="bodyContainer">
    <div id="searchCriterias">
        <div class="labelDiv">@Html.LabelFor(v => v.CustomerName)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.CustomerName)</div>
        <div class="labelDiv">@Html.LabelFor(v => v.ContactName)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.ContactName)</div>
        <div class="clearfix"></div>
        <div class="labelDiv">@Html.LabelFor(v => v.Plate)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(v => v.Plate, new { @onkeyup = "InputToUpperWithoutWhiteSpace(this);" })</div>

        <div class="labelDiv">@Html.LabelFor(v => v.StartDate)</div>
        <div class="shortTxtDiv">
            <div class="shortTxtDiv" style="width: 120px;">@Html.Kendo().DatePickerFor(v => v.StartDate).HtmlAttributes(new { style = "width:120px" }).HtmlAttributes(new { type = "text" })</div>
            <span style="float: left; padding: 0 10px; font-weight: bolder">-</span>
            <div class="shortTxtDiv" style="width: 120px">@Html.Kendo().DatePickerFor(v => v.EndDate).HtmlAttributes(new { style = "width:120px" }).HtmlAttributes(new { type = "text" })</div>
        </div>
        <div class="clearDiv">&nbsp;</div>
    </div>
    @ODMSHelpers.LinkButton("btnSearch", ODMSCommon.Resources.MessageResource.Global_Display_Search, "", "", "", CommonValues.PermissionCodes.CustomerSearch.CustomerSearchIndex)
    @ODMSHelpers.LinkButton("btnClear", ODMSCommon.Resources.MessageResource.Global_Display_Clear, "", "", "", "")

    <div class="kendoGridDivObjectSearch" id="grd">
        @(Html.Kendo().Grid<ODMSModel.ObjectSearch.AppointmentSearchListModel>()
          .Name("grid")

          .Columns(columns =>
              {
                  columns.Bound(p => p.AppointmentId).ClientTemplate("<center><a class='loadTab' onclick='selectCustomer(#=AppointmentId#, \"#=AppointmentDate#\")' id='#=AppointmentId#'><img class=iconLink src='" + Url.Content("~/Images/choose.ico") + "'></a></center>").Title(ODMSCommon.Resources.MessageResource.Global_Display_Select).Width(50).Sortable(false);
                  columns.Bound(p => p.VehicleModel).Width(100).Sortable(true);
                  columns.Bound(p => p.VehiclePlate).Width(100).Sortable(true);
                  columns.Bound(p => p.VehicleColor).Width(100).Sortable(true);
                  columns.Bound(p => p.CustomerFullName).Width(100).Sortable(true);
                  columns.Bound(p => p.AppointmentType).Width(100).Sortable(true);
                  columns.Bound(p => p.AppointmentDate).Width(150).Format("{0:dd/MM/yyyy hh:mm}").Sortable(true);
                  columns.Bound(p => p.ContactName).Width(100).Sortable(true);
                  columns.Bound(p => p.ContactSurname).Width(100).Sortable(true);
                  columns.Bound(p => p.ContactAddress).Width(100).Sortable(true);
                  columns.Bound(p => p.ContactPhone).Width(100).Sortable(true);
              })
          .Pageable()
          .Sortable()
          .Scrollable()
          .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .PageSize(ODMSCommon.CommonValues.GridPageSize.Short)
                                        .ServerOperation(true)
                                        .Read(read => read.Action("SearchAppointment", "ObjectSearch", Model).Data("AppointmentSearch"))
                                        .Model(model => model.Field(o => o.AppointmentId).DefaultValue(-1))
                                        .Model(model => model.Field(o => o.CustomerFullName).DefaultValue("-")))
          )
    </div>
</div>

<script type="text/javascript">
    function AppointmentSearch() {
        return {
            CustomerName: $('#CustomerName').val(),
            ContactName: $('#ContactName').val(),
            Plate: $('#Plate').val(),
            StartDate: $('#StartDate').val(),
            EndDate: $('#EndDate').val()
        };
    }

    $(document).ready(function () {
        $("#btnSearch").on("click", function (e) {
            var grid = $('#grid').data('kendoGrid');
            grid.dataSource.page(1);
        });

        $("#btnClear").on("click", function (e) {
            $('#searchCriterias').find('input:text').val('');
            var grid = $('#grid').data('kendoGrid');
            grid.dataSource.page(1);
        });
    });

    function selectCustomer(customerId, customerName) {
        if (customerName == null || customerName == '')
            customerName = "-";
        else {
            var d = Date.parse(customerName);
            d = new Date(d);
            var day = d.getDate();
            var month = d.getMonth();
            month++;
            var year = d.getFullYear();
            var hour = d.getHours();
            var minute = d.getMinutes();
            if (day < 10) day = "0" + day;
            if (month < 10) month = "0" + month;
            if (hour < 10) hour = "0" + hour;
            if (minute < 10) minute = "0" + minute;
            customerName = day + "/" + month + "/" + year + " " + hour + ":" + minute;
        }

        if (window.parent != "undefined") {
            var currentWindowState = window.parent.getWindowState("@Model.ReferenceObjectId" + "SearchWindow", false);
            var parentSetterFunctionName = "setFoundValuesFor" + "@Model.ReferenceObjectId";
            window.parent[parentSetterFunctionName]("@Model.ReferenceObjectId", customerId, customerName, "@Model.SelectCallBackFunction", currentWindowState);
        }
    }


</script>
<style>
    body
    {
        background-color: #EDF1F4 !important;
        overflow-x: hidden;
    }

    .kendoGridDivObjectSearch
    {
        width: 1300px;
        padding-bottom: 30px;
    }
</style>
