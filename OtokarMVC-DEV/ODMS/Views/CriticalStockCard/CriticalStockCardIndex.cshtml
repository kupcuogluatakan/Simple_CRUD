@using ODMSCommon.Resources
@using ODMSCommon.Security
@using ODMSModel.CriticalStockCard

@model ODMSModel.CriticalStockCard.CriticalStockCardListModel

@{
    ViewBag.Title = MessageResource.CriticalStockCard_PageTitle_Index;
}
@Html.AntiForgeryToken()
<div id="showSearch">@MessageResource.Global_Display_Search_Criteria</div>
<div id="searchDiv">
    <div id="searchFields">
        <div class="labelDiv">@Html.LabelFor(v => v.DealerName)</div>
        <div class="shortTxtDiv">
            @Html.Kendo().ComboBoxFor(v => v.IdDealer).DataTextField("Text").DataValueField("Value").BindTo(ViewBag.DealerList as List<SelectListItem>).Placeholder(CommonUtility.GetResourceValue("Global_Display_Choose")).Enable(UserManager.UserInfo.GetUserDealerId() == 0)
        </div>
        <div class="labelDiv">@Html.LabelFor(d => d.PartCode)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(d => d.PartCode) </div>

        <div class="labelDiv">@Html.LabelFor(d => d.PartName)</div>
        <div class="shortTxtDiv">@Html.TextBoxFor(d => d.PartName) </div>
        <br />
        <br />
    </div>
    <br />
</div>


@ODMSHelpers.LinkButton("btnSearch", ODMSCommon.Resources.MessageResource.Global_Display_Search, "", "", "", CommonValues.PermissionCodes.CriticalStockCard.CriticalStockCardIndex)
@ODMSHelpers.LinkButton("btnCreate", MessageResource.Global_Display_New, "Create", "modalClick createNew", MessageResource.CriticalStockCard_PageTitle_Create, CommonValues.PermissionCodes.CriticalStockCard.CriticalStockCardCreate)


<br />
<div id="CriticalStockCardModelWindowDiv">
    @(Html.Kendo().Window()
        .Name("CriticalStockCardModelWindow")
     .Draggable()
    .Resizable()
    .Width(950)//.Width(950)
    .Height(350)//.Height(440)
    .Visible(false)
    .Modal(true)
    .Iframe(true)
    .Events(ev => ev.Close(@"function(e){
         var grid = $('#CriticalStockCardGrid').data('kendoGrid');
        grid.dataSource.page(1);
    }"))
    )
</div>

<script src="~/Scripts/jquery.maskedinput.js"></script>

<script type="text/javascript">
    function DeleteCriticalStockCard(obj, aId, idDealer) {
        var token = $('input[name="__RequestVerificationToken"]').val();

        DeleteConfirm(function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteCriticalStockCard", "CriticalStockCard")",
                data: { IdPart: aId, IdDealer: idDealer, "__RequestVerificationToken": token },
                traditional: true,
                success: function (result) {
                    if (result.Status == 0)
                        SetErrorMessage(result.Message);
                    else {
                        var grid = $('#CriticalStockCardGrid').data('kendoGrid');
                        grid.dataSource.read();
                        SetSuccessMessage(result.Message);
                    }
                },
                dataType: "json"
            });
        });
    }

    function ShowPopup(frameTitle, link) {
        $("#CriticalStockCardModelWindow_wnd_title").html(frameTitle);

        var windowWidget = $("#CriticalStockCardModelWindow").data("kendoWindow");
        var closeOrigin = windowWidget.close;

        windowWidget.refresh({
            url: link
        }).center();
        windowWidget.center();
        windowWidget.open();


    }

    $(document).ready(init);
    function GetParameters() {
        return {
            ReportType: 17,
            Columns: "DealerName,PartCode,PartName,CriticalStockQuantity,ShipQty,Unit",
            IdDealer: $('#IdDealer').val(),
            IdPart: $('#IdPart').val(),
            PartName: $('#PartName').val(),
            PartCode: $('#PartCode').val()
        };
    }
    function init() {

        $("body").delegate("#btnSearch", "click", function (e) {
            var grid = $('#CriticalStockCardGrid').data('kendoGrid');
            grid.dataSource.page(1);

        });
        $("body").delegate("#showSearch", "click", function (e) {
            var IsVisible = Boolean($(this).hasClass("searchVisible"));

            if (!IsVisible) {
                $(this).html('@MessageResource.Global_Display_Hide_Search_Criteria');
                $(this).addClass("searchVisible");
                $("#searchDiv").show("slow");
            }
            else {
                $(this).html("@MessageResource.Global_Display_Search_Criteria");
                $(this).removeClass("searchVisible");
                $("#searchDiv").hide("slow");
            }
        });
        $("body").delegate(".modalClick", "click", function (e) {
            $('#CriticalStockCardModelWindow').html('');
            e.preventDefault();

            var link;
            var frameTitle = $(this).attr("frameTitle");
            if ($(this).hasClass("createNew")) {
                link = "@Url.Action("CriticalStockCardCreate", "CriticalStockCard")";
            }
            $("#CriticalStockCardModelWindow_wnd_title").html(frameTitle);

            var windowWidget = $("#CriticalStockCardModelWindow").data("kendoWindow");
            var closeOrigin = windowWidget.close;

            windowWidget.refresh({
                url: link
            }).center();
            windowWidget.center();
            windowWidget.open();

        });
    }


</script>
@Html.Partial("_ExcelExport",new ODMS.Model.ExportModel())

<div class="kendoGridDiv" id="grd">
    @(Html.Kendo().Grid<CriticalStockCardListModel>()
          .Name("CriticalStockCardGrid")
          .Columns(columns =>
              {
                  columns.Bound(p => p.IdDealer).ClientTemplate("<center><a href='javascript:void(0);' frameTitle='" + CommonUtility.GetResourceValue("CriticalStockCard_PageTitle_Delete") + "' onclick='DeleteCriticalStockCard(this,#=IdPart#, #=IdDealer#);'><img class='iconLink' src='" + Url.Content("~/Images/delete.png") + "'/></a></center>").Title(CommonUtility.GetResourceValue("Global_Display_Delete")).Width(50).Sortable(false).Visible(ODMSHelpers.UserHasPermission(CommonValues.PermissionCodes.CriticalStockCard.CriticalStockCardDelete));
                  columns.Bound(p => p.DealerName).Sortable(true);
                  columns.Bound(p => p.PartCode).Sortable(true);
                  columns.Bound(p => p.PartName).Sortable(true);
                  columns.Bound(p => p.CriticalStockQuantity).Sortable(true);
                  columns.Bound(p => p.ShipQty).Sortable(true);
                  columns.Bound(p => p.Unit).Sortable(true);
              })
          .Pageable()
          .Sortable()
          .Scrollable()


          .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .PageSize(10)
                                        .ServerOperation(true)
                                        .Read(read => read.Action("ListCriticalStockCard", "CriticalStockCard", Model).Data("GetParameters"))
                                        .Model(model => model.Field(o => o.IdDealer).DefaultValue(-1)))

          )
</div>

<div id="excelVisibility">
    <h4>@Html.Raw(MessageResource.Global_Display_UploadFromExcel) </h4>
    <div class="labelDiv" style="width: 80px">@MessageResource.Global_Display_SampleFile </div>
    <div>
        <a class="k-link2" href="@Url.Action("ExcelSample")">
            <img class=iconLink src='@Url.Content("~/Images/excelSample.png")' title='@MessageResource.Global_Display_SampleFile'>
        </a>
        <br />
        @using (Html.BeginForm("CriticalStockCardIndex", "CriticalStockCard", FormMethod.Post))
        {
            @Html.Kendo().Upload().Name("excelFile").TemplateId("fileTemplate").Events(e => e.Select("onSelect")).Multiple(false).Messages(m => m.Select(MessageResource.Global_Display_SelectFile))
            <div id="divExcepUpload">
                @ODMSHelpers.Button("Upload", CommonUtility.GetResourceValue("Global_Display_UploadFromExcel"), "", "UploadExcel")
            </div>
        }
    </div>
</div>
