@using ODMSCommon.Resources;
@model ODMSModel.SparePartSaleOrder.SparePartSaleOrderViewModel
@{
    ViewBag.Title = MessageResource.SparePartSaleOrder_PageTitle_SaleOrderCreate;
    Layout = "~/Views/Shared/Popup_Layout.cshtml";
}
<style type="text/css">
    #popupContent {
        width: auto !important;
    }
</style>
<body style="height: 500px">
    <link href="~/Style/Content.css" rel="stylesheet" />
    <script src="~/Scripts/odms.objectsearch.js"></script>
    <link href="~/Style/bootstrap.css" rel="stylesheet" />
    <script src="~/Scripts/custom.js"></script>
    @Html.AntiForgeryToken()
    <div class="clearDiv">&nbsp;</div>
    <div class="labelDiv">@Html.LabelFor(v => v.CustomerName)</div>
    <div class="shortTxtDiv">@Html.DisplayFor(v => v.CustomerName)</div>
    <div class="labelDiv">@Html.LabelFor(v => v.SoNumber)</div>
    <div class="shortTxtDiv">@Html.DisplayFor(v => v.SoNumber)</div>
    <div class="clearDiv">&nbsp;</div>
    <div class="labelDiv">@Html.LabelFor(v => v.OrderDate)</div>
    <div class="shortTxtDiv">@Html.DisplayFor(v => v.OrderDate)</div>
    <div class="labelDiv">@Html.LabelFor(v => v.SoTypeName)</div>
    <div class="shortTxtDiv">@Html.DisplayFor(v => v.SoTypeName)</div>
    <div class="clearDiv">&nbsp;</div>
    @Html.HiddenFor(v => v.SoNumber)

    <div class="checkbox"><label>@Html.CheckBox("SelectAll", new { onClick = "SelectAll();" }) @MessageResource.Global_Display_SelectAll</label> </div>
    <div class="kendoGridDiv" id="grd2" style="width: 1450px">
        @(Html.Kendo().Grid<ODMSModel.SparePartSaleOrderDetail.SparePartSaleOrderDetailListModel>()
          .Name("grdCreateSaleOrder")
          .Columns(columns =>
          {
              columns.Bound(p => p.IsSelected).ClientTemplate("#if(StockQuantity>0){#" +
                                                         "<input type='checkbox' onchange='selectChange(this);' class='cbSelect' name='IsSelected' />" +
                                                         "#}else{# " +
                                                         "  <input type='checkbox' onchange='selectChange(this);' class='cbSelect' name='IsSelected' disabled='disabled' />" +
                                                         "#}#").Title(CommonUtility.GetResourceValue("Global_Display_Select")).Width(50).Sortable(false);
              columns.Bound(d => d.SparePartSaleOrderDetailId).ClientTemplate("<center><a href='javascript:void(0);' frameTitle='" + MessageResource.SparePartSaleOrderDetail_PageTitle_Delete + "' onclick='DeleteSparePartSaleOrderDetail(#=SparePartSaleOrderDetailId#);'><img class='iconLink' src='" + Url.Content("~/Images/delete.png") + "'/></a></center>").Title(MessageResource.Global_Display_Delete).Width(40).Sortable(false).Visible(ODMSHelpers.UserHasPermission(CommonValues.PermissionCodes.SparePartSaleOrderDetail.SparePartSaleOrderDetailDelete)).Visible(Model.StatusId == (int)CommonValues.SparePartSaleOrderStatus.NewRecord);
              columns.Bound(d => d.SparePartCode).Width(100).Sortable(true);
              columns.Bound(d => d.SparePartName).Width(100).Sortable(true);
              columns.Bound(d => d.OrderQuantity).HtmlAttributes(new { title = "asd", style = "text-align:right" }).Width(50).Sortable(true);
              columns.Bound(d => d.PlannedQuantity).Sortable(false).HtmlAttributes(new { @class = "bgColor" }).Width(50);
              columns.Bound(d => d.ShippedQuantity).HtmlAttributes(new { style = "text-align:right" }).Width(50).Sortable(true);
              columns.Bound(d => d.ListPrice).HtmlAttributes(new { style = "text-align:right" }).Width(50).Sortable(true);
              columns.Bound(d => d.OrderPrice).HtmlAttributes(new { style = "text-align:right" }).Width(50).Sortable(true);
              columns.Bound(d => d.ConfirmPrice).HtmlAttributes(new { style = "text-align:right" }).Width(50).Sortable(true);
              columns.Bound(d => d.ListDiscountRatio).HtmlAttributes(new { style = "text-align:right" }).Width(50).Sortable(true);
              columns.Bound(d => d.AppliedDiscountRatio).Width(50).Sortable(true);
          })
          .Pageable()
          .Sortable()
          .Scrollable()
          .Events(e => e.Edit("onEdit"))
          .Editable(editable => editable.Mode(GridEditMode.InCell))
          .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .PageSize(10)
                                        .ServerOperation(true)
                                                        .Read(read => read.Action("ListSparePartSaleOrderDetailsForSaleOrder", "SparePartSaleOrder").Data("Search"))
                                        .Model(model =>
                                        {
                                            model.Id(p => p.SparePartSaleOrderDetailId);
                                            model.Field(p => p.IsSelected).Editable(false);
                                            model.Field(p => p.SparePartCode).Editable(false);
                                            model.Field(p => p.SparePartName).Editable(false);
                                            model.Field(p => p.OrderQuantity).Editable(false);
                                            model.Field(p => p.PlannedQuantity).Editable(true);
                                            model.Field(p => p.ShippedQuantity).Editable(false);
                                            model.Field(p => p.ListPrice).Editable(false);
                                            model.Field(p => p.OrderPrice).Editable(false);
                                            model.Field(p => p.ConfirmPrice).Editable(false);
                                            model.Field(p => p.ListDiscountRatio).Editable(false);
                                            model.Field(p => p.AppliedDiscountRatio).Editable(false);
                                        })
                                        )
        )

    </div>
    <div class="btn-group" style="height: 40px;">
        <button class="btn btn-info btnCreateSaleOrder" onclick=" CreateSaleOrder(this) ">
            <i class="fa fa-check"></i> &nbsp;
            @MessageResource.SparePartSaleOrder_Display_CreateSaleOrder
        </button>
    </div>
</body>
<script>
    function Search() {
        return {
            SoNumber: $("#SoNumber").val()
        };
    }
    function SelectAll() {
        var checked = $('#SelectAll').prop('checked');
        var grid = $('#grdCreateSaleOrder').data("kendoGrid");
        var list = grid.dataSource.data();
        for (var i = 0; i < list.length; i++) {
            if (list[i].StockQuantity > 0)
                list[i].IsSelected = checked;
        }
        $(".cbSelect:enabled", "#grdCreateSaleOrder").prop("checked", checked);
    }


    function onChange(e) {
        var grid = $('#grdCreateSaleOrder').data("kendoGrid");

        var selectedItemUId = this.element.parent().closest('tr').attr('data-uid');
        var item = grid.dataSource.getByUid(selectedItemUId);

        var newValue = this.value() == 0 ? 1 : this.value();
        if (newValue > item.PlannedQuantity)
            newValue = item.PlannedQuantity;
        this.value(newValue);
        item.set("PlannedQuantity", newValue);
    }
    function selectChange(obj) {
        var grid = $('#grdCreateSaleOrder').data("kendoGrid");
        var row = $(obj).closest("tr");
        var item = grid.dataItem(row);
        item.IsSelected = $(obj).prop("checked");
    }
    function onEdit(e) {
        var data = e.model;
        var oldqty = data.PlannedQuantity;
        if (data.IsSelected == false) {
            this.closeCell();
        }
        if (data.PlannedQuantity == 0) {

        }

        e.preventDefault();
    }
    function CreateSaleOrder(obj) {

        var items = [];

        $(".btnCreateSaleOrder").addClass("disabled");
        var grid = $('#grdCreateSaleOrder').data("kendoGrid");
        var list = grid.dataSource.data();

        for (var i = 0; i < list.length; i++) {
            if (list[i].IsSelected == true) {
                if (!list[i].PlannedQuantity || list[i].PlannedQuantity==0) {
                    SetErrorMessage('Planlanan miktar doldurulmalıdır.');
                    $(".btnCreateSaleOrder").removeClass("disabled");
                    return;
                }
                items.push({ SparePartSaleOrderDetailId: list[i].SparePartSaleOrderDetailId, PlannedQuantity: list[i].PlannedQuantity });
            }
        }

        $.ajax('@Url.Action("CreateSaleOrder", "SparePartSaleOrder")',
        {
            traditional: true,
            cache: false,
            success: function (json) {
                if (json.errorNo == 1)
                    SetErrorMessage(json.errorMessage);
                else {
                    $(".btnCreateSaleOrder").removeClass("disabled");
                    SetSuccessMessage("@MessageResource.Global_Display_Success");
                    $(".btnCreateSaleOrder").removeClass("disabled");
                    $("#btnSearch").trigger("click");
                }
            },
            error: function (xhr) {
                SetErrorMessage(xhr.responseText);
            },
            data: JSON.stringify(items),
            dataType: "json",
            method: "post"
        });
    }

</script>