@using ODMSCommon.Resources
@model ODMSModel.DealerPurchaseOrderPartConfirm.DealerPurchaseOrderPartConfirmListModel

@{
    ViewBag.Title = MessageResource.DealerPurchaseOrderPartConfirm_PageTitle_Index;
}
<br />
@if (Model.OrderStatusId == (int)CommonValues.PurchaseOrderStatus.OpenPurchaseOrder && Model.SupplierDealerConfirm ==3)
{
    @ODMSHelpers.Button("btnSaveAndSendApprove", CommonUtility.GetResourceValue("Global_Display_Save"), CommonValues.PermissionCodes.DealerPurchaseOrderPartConfirm.DealerPurchaseOrderPartConfirmSave, "DealerPurchaseOrderPartConfirmSaveAndSendApprove", "SaveChanges();")
}
<div id="DealerPurchaseOrderPartConfirmModelWindowDiv">
    @(Html.Kendo().Window()
          .Name("DealerPurchaseOrderPartConfirmModelWindow")
          .Draggable()
          .Resizable()
          .Width(950)
          .Height(440)
          .Visible(false)
          .Modal(true)
          .Iframe(true)
          .Events(ev => ev.Close(@"function(e){
         var grid = $('#DealerPurchaseOrderPartConfirmGrid').data('kendoGrid');
        grid.dataSource.page(1);
    }"))
          )
</div>
@Html.HiddenFor(v => v.OrderStatusId)
@Html.HiddenFor(v => v.PoNumber)
<script>  
    function onRequestEnd(e) {
        if (e.type == "update") {
            if (e.response.OprErrorNo != 0) {
                SetErrorMessage(e.response.OprErrorMessage);
            } else {
                SetSuccessMessage('@MessageResource.Global_Display_Success');
            }
            var grid = $('#DealerPurchaseOrderPartConfirmGrid').data('kendoGrid');
            grid.dataSource.page(1);
        }
    }

    function SaveChanges() {
        var grid = $('#DealerPurchaseOrderPartConfirmGrid').data().kendoGrid;
        var dataSource = grid.dataSource;
        var count = grid.dataSource.total();
        var isValid = true;
        console.log(count,dataSource);
        if (dataSource.hasChanges()) {
            for (var i = 0; i < count; i++) {
                var item = dataSource.data()[i];
                if(!item) break;
                var shipQuant = item.ShipmentQuantity;
                var stockQuant = item.StockQuantity;
                var orderQuant = item.OrderQuantity;
                if (shipQuant > stockQuant || shipQuant > orderQuant) {
                    isValid = false;
                }
            }
            if (isValid) {
                CustomConfirm(function() {
                    grid.saveChanges();
                }, "@MessageResource.Global_Display_Save", "@MessageResource.DealerPurchaseOrderPartConfirm_Display_SaveConfirm", "@MessageResource.Global_Display_Yes", "@MessageResource.Global_Display_No");
            } else {
                SetErrorMessage('@MessageResource.DealerPurchaseOrderPartConfirm_Warning_ShipmentQuantity');
            }
        }
        else
        {
            SetErrorMessage('@MessageResource.DealerPurchaseOrderPartConfirm_Warning_NoChange'); 
        }
    }

    function OnDatabound(aQty, status) {
        var culture = "@System.Threading.Thread.CurrentThread.CurrentUICulture.ToString()";
        if (status == 1 || @Model.OrderStatusId != 1 || @Model.SupplierDealerConfirm == 1) {
            if (culture == "tr-TR") aQty = aQty.toString().replace(".", ",");
            return aQty;
        } else {
            if (aQty >= 0 && aQty != null) {
                if (culture == "tr-TR") aQty = aQty.toString().replace(".", ",");
                return "<div style='background: #CCFFCC'>" + aQty + " </div>";
            } else {
                return "<div style='background: #CCFFCC'>" + '@MessageResource.Global_Display_Enter' + " </div>";
            }
        }
    }

    function onEdit(e) {
        var data = e.model;
        if ((data.StatusId != 0 && data.StatusId != -1) || @Model.SupplierDealerConfirm == 1) {
            this.closeCell();
        }
        e.preventDefault();
    }
</script>
<div class="kendoGridDiv" id="grd">
    @(Html.Kendo().Grid<ODMSModel.DealerPurchaseOrderPartConfirm.DealerPurchaseOrderPartConfirmListModel>()
              .Name("DealerPurchaseOrderPartConfirmGrid")

              .Columns(columns =>
                  {
                      columns.Bound(p => p.PartCodeName).Width(100).Sortable(true);
                      columns.Bound(p => p.OrderQuantity).Width(100).Sortable(true);
                      columns.Bound(p => p.StockQuantity).Width(100).Sortable(true);
                      columns.Bound(p => p.ShipmentQuantity).Width(100).Sortable(true).ClientTemplate("#= OnDatabound(ShipmentQuantity, StatusId)#").EditorTemplateName("DecimalNumericTextbox").Format("{0:N2}").HtmlAttributes(new { @class = "editableValues" });
                      columns.Bound(p => p.StatusName).Width(100).Sortable(true);
                  })
              .Pageable()
              .Sortable()
              .Scrollable()
              .Events(e=>e.Edit("onEdit"))
              .Editable(editable => editable.Mode(GridEditMode.InCell))
              .DataSource(dataSource => dataSource
                                            .Ajax()
                                            .Batch(true)
                                            .PageSize(10)
                                            .Read(read => read.Action("ListDealerPurchaseOrderPartConfirm", "DealerPurchaseOrderPartConfirm", Model))
                                            .Model(
                                            model =>
                                            {
                                                model.Id(p => p.PurchaseOrderDetailSeqNo);
                                                model.Field(p => p.PartCodeName).Editable(false);
                                                model.Field(p => p.OrderQuantity).Editable(false);
                                                model.Field(p => p.StockQuantity).Editable(false);
                                                model.Field(p => p.StatusName).Editable(false);
                                                model.Field(p => p.ShipmentQuantity).Editable(Model.OrderStatusId == (int) CommonValues.PurchaseOrderStatus.OpenPurchaseOrder);
                                            })
                                            .Events(events => events.RequestEnd("onRequestEnd"))
                                            .Update(update => update.Action("DealerPurchaseOrderPartConfirmSave", "DealerPurchaseOrderPartConfirm").Type(HttpVerbs.Post))))

</div>


