@using ODMSCommon.Resources
@using ODMSModel.WorkOrderPickingDetail

@model WorkOrderPickingDetailListModel
@{
    ViewBag.Title = @MessageResource.WorkOrderPicking_PageTitle_Index;
}

@Html.AntiForgeryToken()
<script id="complete-confirmation" type="text/x-kendo-template">
        <p class="complete-message">@Html.Raw(MessageResource.WOP_Display_CompleteConfirmQuestion)</p>
        <p style="text-align:right">
        <button class="complete-confirm k-button">@MessageResource.Global_Display_Yes</button>
        <button class="complete-cancel k-button">@MessageResource.Global_Display_No</button></p>
</script>
<script id="complete-confirmationDet" type="text/x-kendo-template">
        <p class="complete-message">@Html.Raw(MessageResource.WOP_Display_LessCompleteConfirmQuestion)</p>
        <p style="text-align:right">
        <button class="complete-confirm k-button">@MessageResource.Global_Display_Yes</button>
        <button class="complete-cancel k-button">@MessageResource.Global_Display_No</button></p>
</script>
<div class="clearDiv">&nbsp;</div>
<style>
    .redClss {
        background-color: #f08080;
    }

    .blueClss {
        background-color: #b0e0e6;
    }
</style>
<script>
    
    function CompleteConfirm(completeFunction) {
        var confirm = false;
        var temp = "#complete-confirmation";
        var kendoWindow = $("<div />").kendoWindow({
            title: "@MessageResource.Gloabl_Display_Approve",
            resizable: false,
            modal: true
        });
        if (window.isLittle==1) {
            temp = "#complete-confirmationDet";
        }
        kendoWindow.data("kendoWindow")
            .content($(temp).html())
            .center().open();

        kendoWindow
            .find(".complete-confirm, .complete-cancel")
            .click(function() {
                if ($(this).hasClass("complete-confirm")) {
                    confirm = true;
                    if (completeFunction)
                        completeFunction();
                }
                kendoWindow.data("kendoWindow").close();
            })
            .end();
        return confirm;
    }

    //When textbox value clicked 

    function partAndAdd(partId) {
        var grid = $("#gridWOPDet").data("kendoGrid");
        var parentGridId = '';
        var data = grid.dataSource.data();
        $.each(data, function(i, row) {
            if (row.PartId == partId) {
                parentGridId = row.WOPDetId;
                //Change color that we add sub row 
                $('tr[data-uid="' + row.uid + '"]').addClass("blueClss");
                //$('tr[data-uid="' + row.uid + '"]').css("background-color", "#b0e0e6");
                addGrid(parentGridId, partId,row.RequestQuantity,1);
            }
        });

        //$("#txtPartId").val('');

    }

    function comparePartAndAdd() {
        var partId = $("#PartId").val();
        var grid = $("#gridWOPDet").data("kendoGrid");
        var parentGridId = '';
        var data = grid.dataSource.data();
        $.each(data, function(i, row) {
            if (row.PartId == partId) {

                parentGridId = row.WOPDetId;
                //Change color that we add sub row 
                $('tr[data-uid="' + row.uid + '"]').addClass("blueClss");
                //$('tr[data-uid="' + row.uid + '"]').css("background-color", "#b0e0e6");
                addGrid(parentGridId, partId,row.RequestQuantity,0);
            }
        });

        //$("#txtPartId").val('');

    }

    //Add grid row virtual
    function addGrid(id, partId,reqQty,isBtn) {
        var token = $('input[name="__RequestVerificationToken"]').val();

        var childGrid = $('#WOPDetSubGrid_' + id).data("kendoGrid");
        
        var isReturn = '@Model.IsReturn';
        if (isReturn == 'True') {
            $.ajax({
                type: "POST",
                url: "@Url.Action("StockCardDefaultRackReturn", "WorkOrderPickingDetail")",
                data: { partId: partId, "__RequestVerificationToken": token },
                traditional: true,
                success: function(result) { //if its return type then we need to get defaut rack
                    checkIfChildRows(childGrid,id,result.Text,result.Value,reqQty,isBtn);
                    //                    childGrid.dataSource.add({ WOPDetId: id, ResultId: -1, Text: result.Text, Value: result.Value, Quantity: '1' });
                },
                dataType: "json"
            });

        } else {
            checkIfChildRows(childGrid,id,'@MessageResource.Global_Display_Choose','0',reqQty,isBtn);
            //childGrid.dataSource.add({ WOPDetId: id, ResultId: -1, Text: '@MessageResource.Global_Display_Choose', Value: '0', Quantity: '1' });
        }

    }
</script>
<script>
    function checkIfChildRows(childGrid,id,txt,val,reqQty,isBtn) {
        if (childGrid.dataSource.total() > 0) {
            if (isBtn == 1) {
                //buttondan gelen
                var hQty=0;//parseFloat("0.00").toFixed(2).replace(".", ",");
                $.each(childGrid.dataSource.data(), function(i, row) {
                    
                    hQty = parseFloat(parseFloat(hQty.toString().replace(",", ".")) + parseFloat(row.Quantity.toString().replace(",", "."))).toFixed(2);

                });
                if (hQty<parseFloat(reqQty.toString().replace(",", "."))) {

                    reqQty = parseFloat(reqQty.toString().replace(",", "."));

                    childGrid.dataSource.add({ WOPDetId: id, ResultId: -1, Text: txt, Value: val, Quantity: parseFloat(reqQty - hQty).toFixed(2).replace(".", ",")});
                }

            } else {
                //barcode dan gelen 
                childGrid.dataSource.data()[0].Quantity += 1;
                childGrid.refresh();
            }
        } else {
            if (isBtn == 1) {
                //buttondan gelen
                childGrid.dataSource.add({ WOPDetId: id, ResultId: -1, Text: txt, Value: val, Quantity: reqQty });
            } else {
                //barcode dan gelen 
                childGrid.dataSource.add({ WOPDetId: id, ResultId: -1, Text: txt, Value: val, Quantity: 1 });

            }

        }

    }
    var isSuc = 0;
    $(".clssComplete").click(function() {
        WorkOrderPickingSave(WorkOrderPickingComp);

    });
    
</script>
<script>
    function WorkOrderPickingComp() {
        var token = $('input[name="__RequestVerificationToken"]').val();

        CompleteConfirm(function() {
            $.ajax({
                type: "POST",
                url: '@Url.Action("CompleteWorkOrderPickingDetail", "WorkOrderPickingDetail")',
                data: { mstId: '@Model.WOPMstId', "__RequestVerificationToken": token },
                traditional: true,
                success: function(result) {
                    if (result.Status == 0) {
                        SetErrorMessage(result.Message);
                    }
                    else {
                        //Refresh main grid if success
                        var grid = $('#gridWOPDet').data('kendoGrid');
                        grid.dataSource.read();
                        SetSuccessMessage(result.Message);
                        var grid = $('#gridMST').data('kendoGrid');
                        grid.dataSource.read();

                        $("#divDetails").hide();
                        $("#acsDiv").hide();

                    }
                },
                dataType: "json"
            });
        });
    }

</script>
<script>
    var count = 0;
    var reqCount = 0;
    var isLittle = 0;
    function WorkOrderPickingSave(cmpFunc) {
        window.isSuc = 1;
        $('tr').removeClass("blueClss");
        var pushedData = [];
        var parentGrid = $("#gridWOPDet").data("kendoGrid");
        var data = parentGrid.dataSource.data();
        $.each(data, function(i, row) {
            parentGridId = row.WOPDetId;
            var subGrid = $("#WOPDetSubGrid_" + parentGridId).data('kendoGrid');
            if (subGrid.dataSource.total() > 0) {
                var subData = subGrid.dataSource.data();
                $.each(subData, function(ii, subRow) {
                    //Push data to json array
                    if (subRow.Quantity.toString().indexOf(',')>-1) {
                        subRow.Quantity = subRow.Quantity.replace(',','.');
                    }
                    window.count = window.count + subRow.Quantity;

                    pushedData.push({
                        Text: row.RequestQuantity,
                        Quantity: subRow.Quantity,
                        WOPDetId: subRow.WOPDetId,
                        ResultId: subRow.ResultId,
                        Value: subRow.Value
                    });
                });
            }
            window.reqCount = row.RequestQuantity.replace(',','.');
        });
        if (parseFloat(window.count) < parseFloat(window.reqCount)) {
            window.isLittle = 1;
        } else {
            window.isLittle = 0;
        }
        window.count = 0;
        window.reqCount = 0;
        
        $.ajax({
            type: "POST",
            url: "@Url.Action("SaveWorkOrderPickingDetail", "WorkOrderPickingDetail")",
            data: JSON.stringify(pushedData),
            traditional: true,
            success: function(result) {
                if (result.ErrorNo == 1) {
                    SetErrorMessage(result.ErrorMessage);
                    window.isSuc = 0;
                   
                    $.each(data, function(i, row) {
                        for (var ii = 0; ii < result.Data.length; ii++) {
                            if (row.WOPDetId == result.Data[ii].WOPDetId) {
                                $('tr[data-uid="' + row.uid + '"]').addClass("redClss"); 
                            }
                        }
                    });
                }
                else {
                    //Refresh main grid if success   
                    window.isSuc = 1;
                    var grid = $('#gridWOPDet').data('kendoGrid');
                    grid.dataSource.read();
                    SetSuccessMessage('@MessageResource.Global_Display_Success');
                    
                    if (cmpFunc) {
                        cmpFunc();
                    }
                }
            },
            dataType: "json"
        });
        setTimeout(function(){$('tr').removeClass("redClss",600);},2000);
    }
    //Save all result row to db
    $(".clssSave").click(function() {
        WorkOrderPickingSave();
    });
    $(".clssDefaultRack").click(function() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("DefaultRack", "WorkOrderPickingDetail")",
            data: { mstId: '@Model.WOPMstId' },
            traditional: true,
            success: function(result) {
                if (result.Status == 0)
                    SetErrorMessage(result.Message);
                else {
                    //Refresh main grid if success
                    SetSuccessMessage(result.Message);
                    $('#gridWOPDet').data("kendoGrid").dataSource.read();
                }
                
            },
            dataType: "json"
        });
    });
</script>
<script>
    function SearchWOPickingDet() {
        return {
            WOPMstId: @Model.WOPMstId
        };
    }
</script>

<script>
    //For Expand all main row
    function onDataBound() {
        var grid = $("#gridWOPDet").data("kendoGrid");
        var data = grid.dataSource.data();
        $.each(data, function(i, row) {
            grid.expandRow(grid.tbody.find('>tr[data-uid="' + row.uid + '"].k-master-row:first'));
        });
    }   

    //For setting Kendo row 
    function onSelect(e) {
        var dataItem = this.dataItem(e.item.index());
        var parentGridId = this.element.parent().closest('div').attr('id');
        var selectedItemUId = this.element.parent().closest('tr').attr('data-uid');
        var childGrid = $('#' + parentGridId).data("kendoGrid");
        var item = childGrid.dataSource.getByUid(selectedItemUId);
        
        item.set("Text", dataItem.Text);
        item.set("Value",dataItem.Value);  
    }
    //List Rack - Warehouse By WOPDetId
    function ListRackByPart(id) {
        return { id: id };
    }

    function DeleteResult(DetId, ResId, UId) {
        if (ResId == -1) {
            //Virtual Row that we added
            var dataRow = $('#WOPDetSubGrid_' + DetId).data("kendoGrid").dataSource.getByUid(UId);
            $('#WOPDetSubGrid_' + DetId).data("kendoGrid").dataSource.remove(dataRow);
        } else {
            //DB row that already exist
            DeleteResultFromDb(ResId,DetId,UId);
        }
    }

    function DeleteResultFromDb(ResultId,DetId,UId) {
        var token = $('input[name="__RequestVerificationToken"]').val();
        
        DeleteConfirm(function() {
            $.ajax({
                type: "POST",
                url: "@Url.Action("WorkOrderPickingDetailDelete", "WorkOrderPickingDetail")",
                data: { id: ResultId,"__RequestVerificationToken": token  },
                traditional: true,
                success: function(result) {
                    if (result.Status == 0)
                        SetErrorMessage(result.Message);
                    else {
                        //If Succes we need to delete db row manually.
                        var dataRow = $('#WOPDetSubGrid_' + DetId).data("kendoGrid").dataSource.getByUid(UId);
                        $('#WOPDetSubGrid_' + DetId).data("kendoGrid").dataSource.remove(dataRow);
                        $('#gridWOPDet').data("kendoGrid").dataSource.read();
                        SetSuccessMessage(result.Message);
                    }
                },
                dataType: "json"
            });
        });
    }
</script>
<div id="lblComp">
    @{
        if (Model.ParentStatusId != 2)
        {
            @ODMSHelpers.LinkButton("", CommonUtility.GetResourceValue("Global_Display_Save"), "btnSave", "clssSave", CommonUtility.GetResourceValue("AppointmentDetailsMaint_PageTitle_Create"), null)
            @ODMSHelpers.LinkButton("", CommonUtility.GetResourceValue("Global_Display_Complete"), "btnComplete", "clssComplete", null, null)
            @ODMSHelpers.LinkButton("", CommonUtility.GetResourceValue("WorkOrderPicking_Display_DefaultFill"), "btnDefaultRack", "clssDefaultRack", null, CommonValues.PermissionCodes.WorkOrderPicking.WorkOrderPickingIndex)
            <br/>
        <div id="acsDiv" >
    <br />
    <div class="labelDiv">@Html.Label(MessageResource.SparePart_Display_PartCode)</div>
    <div class="shortTxtDiv">@{ Html.RenderAction("AutocompleteSearchForBarcode", "AutocompleteSearch", new { SearchType = "SparePart", CallbackFunction = "comparePartAndAdd", ControlId = "PartId", Title1 = "", Title2 = "", DefaultText = "", DefaultValue = "", ExtraParameter = ";" }); }</div>
    <br />
</div>
        
        }
        else
        {
            @Html.Raw("<div class='labelDiv'>" + Html.LabelFor(b => b.ParentStatusId) + "</div><div style='background-color:orangered;color:white;width:auto;padding:2px'  class='shortTxtDiv'>" + MessageResource.Global_Display_Completed + " </div></br>")
        
       
        }
    }


</div>
<div class="clearDiv">&nbsp;</div>
<div class="kendoGridDiv" id="gridDet">
    @(Html.Kendo().Grid<WorkOrderPickingDetailListModel>()
          .Name("gridWOPDet")
          .Columns(columns =>
          {
              //columns.Bound(b => b.WOPDetId).Width(200).Sortable(true);
              //columns.Bound(b => b.PartId).Width(200).Sortable(true);
              columns.Bound(b => b.PartId).Width(200).ClientTemplate("<center><a href='javascript:void(0);' onClick='partAndAdd(#=PartId#)'  ><img class='iconLink' src='" + Url.Content("~/Images/add.png") + "'/></a></center>").Title(MessageResource.Global_Display_Add).Visible(Model.ParentStatusId != 2).Width(50).Sortable(false);
              columns.Bound(b => b.WOPDetId).Sortable(false).Visible(false);
              columns.Bound(b => b.AppIndicator).Width(250).Sortable(false);
              columns.Bound(b => b.StockType).Width(100).Sortable(true);
              columns.Bound(b => b.PartCodeName).Width(170).Sortable(true);
              columns.Bound(b => b.PartName).Width(200).Sortable(true);
              columns.Bound(b => b.RequestQuantity).Width(100).Sortable(true);
              columns.Bound(b => b.UnitName).Width(100).Sortable(true);
              columns.Bound(b => b.PickQuantity).Width(100).Sortable(true);

          })
          .Events(e => e.DataBound("onDataBound"))
          .ClientDetailTemplateId("template")
          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(10)
              .ServerOperation(true)
              .Read(read => read.Action("ListWorkOrderPickingDetail", "WorkOrderPickingDetail", Model).Data("SearchWOPickingDet"))
              .Model(model => model.Field(b => b.WOPDetId).DefaultValue(-1)))
          )

</div>
<script id="template" type="text/kendo-tmpl">
    <div class="clearfix"></div>
    @(Html.Kendo().Grid<WOPDetSubListModel>()
          .Name("WOPDetSubGrid_#=WOPDetId#")
          .HtmlAttributes(new { style = "width: 480px;" })
          .Columns(columns =>
          {
              columns.Bound(b => b.ResultId).ClientTemplate("<center><a href='javascript:void(0);' frameTitle='" + MessageResource.Bank_PageTitle_Delete + "' onclick='DeleteResult(\\#=WOPDetId\\#,\\#=ResultId\\#,\"\\#=uid\\#\");'><img class='iconLink' src='" + Url.Content("~/Images/delete.png") + "'/></a></center>").Visible(Model.ParentStatusId != 2).Title(MessageResource.Global_Display_Delete).Width(50).Sortable(false);
              columns.Bound(o => o.Value).EditorTemplateName("RackListbyPartEditor").ClientTemplate("\\#=Text\\#").Width(300);
              columns.Bound(p => p.WOPDetId).Visible(false);
              columns.Bound(o => o.Quantity).Width(100).Format("{0:N}").HtmlAttributes(new { @class = "editableValues" });
          })
          .DataSource(dataSource => dataSource
              .Ajax()
              .Read(read => read.Action("ListWorkOrderPickingDetailSub", "WorkOrderPickingDetail", new { WOPDetId = "#=WOPDetId#" }))
              .Model(m =>
              {
                  m.Id(p => p.ResultId);
                  m.Field(p => p.ResultId).Editable(false);
                  m.Field(p => p.Value).Editable(true);
                  m.Field(p => p.Quantity).Editable(true);
              })
          )
          .AutoBind(true)
          .Editable(e => e.Mode(GridEditMode.InCell))
          .ToClientTemplate()
          )

</script>
<div id="lblSave">
    @{
        if (Model.ParentStatusId != 2)
        {
        <br />
        @ODMSHelpers.LinkButton("", CommonUtility.GetResourceValue("Global_Display_Save"), "Create", "clssSave", CommonUtility.GetResourceValue("AppointmentDetailsMaint_PageTitle_Create"), null)
        @ODMSHelpers.LinkButton("", CommonUtility.GetResourceValue("Global_Display_Complete"), "Create", "clssComplete", null, null)
        @ODMSHelpers.LinkButton("", CommonUtility.GetResourceValue("WorkOrderPicking_Display_DefaultFill"), "btnDefaultRack", "clssDefaultRack", null, CommonValues.PermissionCodes.WorkOrderPicking.WorkOrderPickingIndex)
        <br />
        }
    }
</div>
