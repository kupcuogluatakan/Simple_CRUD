
@{
    Layout = null;
}



<div id="mlContent" style="">
    <div id="languageSelectionDiv" style="width: 400px; height: 200px;">
        <table style="width: 320px; margin: 30px;">
            <tr>
                <td style="width: 100px">Eklenecek Dil:                
                </td>
                <td style="width: 220px">

                    @Html.Kendo().ComboBox().Name("ddlLanguage").DataTextField("LanguageCode").DataValueField("LanguageCode").BindTo(ViewBag.DefaultLanguages as  List<MultiLanguageContentViewModel>).SelectedIndex(0)

                </td>
            </tr>
            <tr>
                <td colspan="2" style="padding-top: 10px">
                    <div style="text-align: center;" ><input type="button" id="AddLang" value="Ekle" class="k-button" /></div>
                </td>
            </tr>
        </table>


    </div>
    <table style="margin-left: -3px">
        <tr>
            <td style="float: left; display: inline">
                <p id="languageHolder" class="languageSelection">
                </p>
                <a href="#" class="btn btn-primary addNewLanguage">+</a>

            </td>
        </tr>
        <tr>
            <td>
                <textarea cols="80" rows="3" id="txtLanguageContent" name="txtText" class="k-textbox" style="height: 60px; resize: none"></textarea>
            </td>
        </tr>
    </table>
    <div id="languageModel" style="display: none">
        <input type="hidden" id="txtSelectedLanguageCode" value="TR" />

        <input type="text" style="width: 100px; height: 50px" id="MultiLanguageContentAsText" name ="MultiLanguageContentAsText" value="@(string.IsNullOrWhiteSpace(ViewBag.DefaultText) ? "TR||" : ViewBag.DefaultText)" />
        <input type="hidden" style="width: 50px; height: 50px" id="isValidText" name="isValidText" value="" />
        <input type="hidden" style="width: 50px; height: 50px" id="isEnabled" name="isValidText" value="@(string.IsNullOrWhiteSpace(ViewBag.IsEnabled) ? "1" : ViewBag.IsEnabled)" />
        
    </div>
</div>
<script type="text/javascript">


    var languageList;
    $(document).ready(function () {
        var isEnabled = $("#isEnabled").val();
        if(isEnabled == "0")
            $("#txtLanguageContent").attr("readonly", "readonly");


        SetInitialContent();
        $('.addNewLanguage').on("click", function (e) {


            $("#languageSelectionDiv").kendoWindow({
                width: "400px",
                height: "100px",
                modal: true,

                resizable: false,
                draggable: false,
                title: "Lütfen Dil Seçin"
            }).data("kendoWindow").open().center();


        });

        $('#txtLanguageContent').blur(function () {
            var currentTab = $("#txtSelectedLanguageCode").val();
            var currentText = $("#txtLanguageContent").val();
            var contentContent = SetContentTextboxForLanguage(currentTab, currentText);
            $("#MultiLanguageContentAsText").val(contentContent);

                        @*var currentTab = $("#txtSelectedLanguageCode").val();
            var currentContent = $("#txtLanguageContent").val();
            var rawModel;
            if(languageList != null)
                rawModel = languageList;
            else
                rawModel = @Html.Raw(Json.Encode(@Model));
            $.ajax({
                url: '/MultiLanguage/SaveLanguageContent/',
                type: 'post',
                dataType: 'json',
                async : false,
                // It is important to set the content type
                // request header to application/json because
                // that's how the client will send the request
                contentType: 'application/json',
                data: JSON.stringify({ viewModel: rawModel, languageCode : currentTab, languageContent:currentContent }),
                success: function (result) {
                    languageList = result.retModel;
                    $("#txtCompleteContent").val(result.contentString);
                    $("#isValidText").val(result.retModel.isValidText);
                    $('#languageListChecker').val(JSON.stringify(languageList));

                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                   
                }
            });*@
        });


        $("body").delegate(".language", "click", function () {

            var clickedLanguageCode = $(this).text();

            var initialContent = $("#MultiLanguageContentAsText").val();
            var contentArr = parseContentStringAsArray(initialContent);
            for (var singleContent in contentArr) {
                var addedLangCode = contentArr[singleContent][0];
                if (addedLangCode == clickedLanguageCode) {

                    var selectedLanguageContent = contentArr[singleContent][1];
                    $("#txtLanguageContent").val(selectedLanguageContent);
                    $("#txtSelectedLanguageCode").val(clickedLanguageCode);
                    checkSelected();
                    return;
                }
            }
            checkSelected();
                        @*var rawModel = @Html.Raw(Json.Encode(@Model));
            var clickedTab = $(this).text();
            clickedTab = $.trim(clickedTab);
            var previousTab = $("#txtSelectedLanguageCode").val();
            var previousContent = $("#txtLanguageContent").val();
            $("#txtSelectedLanguageCode").val(clickedTab);
           
            checkSelected();
            $.ajax({
                url: '/MultiLanguage/SavePastContentGetCurrentContent/',
                type: 'post',
                dataType: 'json',
                // It is important to set the content type
                // request header to application/json because
                // that's how the client will send the request
                contentType: 'application/json',
                data: JSON.stringify({ viewModel: languageList, currentLanguageCode : $("#txtSelectedLanguageCode").val(),pastLanguageCode: previousTab,pastContent: previousContent}),
                success: function (result) {
                        ShowErrorMessage(result.Errormessage)
                        ShowSuccessMessage(resuşl
                    $("#txtLanguageContent").val(result.content);
                    languageList = result.retModel;
                    $("#txtCompleteContent").val(result.contentString);
                    $('#languageListChecker').val(JSON.stringify(languageList));
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            });*@
            });
        $("body").delegate("#AddLang", "click", function () {

            $("#languageSelectionDiv").data('kendoWindow').close();

            var selectedLang = $("#ddlLanguage").val();
            $("#txtSelectedLanguageCode").val(selectedLang);
            var htmlCodeToAppend = "<a href='#' class='btn btn-primary languageBtn selected language " + selectedLang.toUpperCase() + "'>" + selectedLang.toUpperCase() + "</a>";
            var dropDown = $("#ddlLanguage").data("kendoComboBox");
            //console.log(dropDown.selectedIndex);
            var sIndex = dropDown.selectedIndex;
            var itemToRemove = dropDown.dataSource.at(sIndex);
            dropDown.dataSource.remove(itemToRemove);
            //console.log(sIndex);
            dropDown.select(0);

            $("#txtLanguageContent").val('');
            $(".languageSelection").html($(".languageSelection").html() + htmlCodeToAppend);
            $('#txtLanguageContent').trigger("blur");
            checkSelected();
            CheckComboItemCount();
                        @*var selectedLang = $("#ddlLanguage").val();
            var rawModel;
            if(languageList != null)
                rawModel = languageList;
            else
                rawModel = @Html.Raw(Json.Encode(@Model));
            var previousLang = $("#txtSelectedLanguageCode").val();
            $("#txtSelectedLanguageCode").val(selectedLang);
            window.data('kendoWindow').close();

            var htmlCodeToAppend = "<a href='#' class='btn btn-primary languageBtn selected language " + selectedLang.toUpperCase() + "'>" + selectedLang.toUpperCase() + "</a>"
            if($(".languageSelection").html().indexOf("language "+selectedLang.toUpperCase()) > 0)
            {
                checkSelected();
                var dropDown = $("#ddlLanguage").data("kendoComboBox");
                var sIndex = dropDown.selectedIndex;
                var itemToRemove = dropDown.dataSource.at(sIndex);
                dropDown.dataSource.remove(itemToRemove);
                dropDown.select(0);
                return false;
            }
            $(".languageSelection").html($(".languageSelection").html() + htmlCodeToAppend);
            checkSelected();
            
           

          
            
            var listJson = rawModel;
            
            if (languageList == null) 
                languageList = listJson;
            else
                languageList= languageList;
            
            $.ajax({
                url: '/MultiLanguage/SaveLanguageContent/',
                type: 'post',
                dataType: 'json',
                // It is important to set the content type
                // request header to application/json because
                // that's how the client will send the request
                contentType: 'application/json',
                data: JSON.stringify({ viewModel: rawModel, languageCode : previousLang, languageContent: $("#txtLanguageContent").val() }),
                success: function (result) {
                    languageList = result.retModel;
                    $("#txtLanguageContent").val('');
                    var dropDown = $("#ddlLanguage").data("kendoComboBox");
                    var sIndex = dropDown.selectedIndex;
                    var itemToRemove = dropDown.dataSource.at(sIndex);
                  
                  
                    $("#txtCompleteContent").val(result.contentString);
                    dropDown.dataSource.remove(itemToRemove);
                    dropDown.select(0);
                    CheckComboItemCount();
                    $('#languageListChecker').val(JSON.stringify(languageList));
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            });*@


        });
        function CheckComboItemCount() {
            var dropDown = $("#ddlLanguage").data("kendoComboBox");
            var remainingItemCount = dropDown.dataSource.data().length;
          
            if (parseInt(remainingItemCount) == 0) {
               
                $(".addNewLanguage").css("display", "none");
            }
        }
        function SetContentTextboxForLanguage(languageCode, content) {

            var contentArr = parseContentStringAsArray($("#MultiLanguageContentAsText").val());
            for (var addedContent in contentArr) {
                var addedLanguage = contentArr[addedContent][0];
                if (addedLanguage == languageCode) {
                    contentArr[addedContent][1] = content;
                    return (parseArrayAsString(contentArr));

                }
            }
            var newContent = $("#MultiLanguageContentAsText").val();
            newContent += "||" + languageCode + "||" + content;
            return (newContent);
        }

        function parseArrayAsString(contentArray) {
            var completeContent = "";

            for (var arrayIndex in contentArray) {
                var parsedLanguage = contentArray[arrayIndex][0];
                var parsedContent = contentArray[arrayIndex][1];
                completeContent += parsedLanguage + "||" + parsedContent + "||";
            }
            completeContent = completeContent.substr(0, completeContent.length - 2);

            return completeContent;
        }

        function parseContentStringAsArray(contentString) {
            var parsedContent = contentString.split('||');
            var parsedString = "";
            var arr = [];
            for (var x = 0; x < parsedContent.length / 2; x++) {

                arr[x] = [];
                var firstElement = x * 2;
                var secondElement = (x * 2) + 1;
                for (var y = 0; y <= 1; y++) {

                    arr[x][0] = parsedContent[firstElement];
                    arr[x][1] = parsedContent[secondElement];
                }
            }
            return arr;
            //for (var arrayIndex in arr) {
            //    parsedString += arr[arrayIndex][0] + '||' + arr[arrayIndex][1] + "||";
            //}
            //parsedString = parsedString.substr(0, parsedString.length-2);
            ////console.log(parsedString);
        }

        function SetComboboxItems(arrayOfAddedContent) {
            var dropDown = $("#ddlLanguage").data("kendoComboBox");
                @*var dataSource = new kendo.data.DataSource({
                    data: @ViewBag.DefaultLanguages
                });
                dropDown.setDataSource(dataSource);*@
                var raw = dropDown.dataSource.data();
                var length = raw.length;
                var item, i;
                for (var addedContent in arrayOfAddedContent) {
                    var addedLanguage = arrayOfAddedContent[addedContent][0];

                    for (i = 0; i < length; i++) {
                        item = raw[i];
                        if (typeof item != "undefined" && item.LanguageCode == addedLanguage) {
                            var itemToRemove = dropDown.dataSource.at(i);
                            dropDown.dataSource.remove(itemToRemove);

                        }
                    }
                }
                dropDown.select(0);
                AppendHtmlOfInitialContent(arrayOfAddedContent);
            }

        function replaceAll(find, replace, str) {
            while (str.indexOf(find) > 0) {
                str = str.replace(find, replace);
            }
            return str;
        }

        function AppendHtmlOfInitialContent(arrayOfAddedContent) {
            var htmlCodeToAppend = "<a href='#' class='btn languageBtn selected language $$LANG_CODE$$'>$$LANG_CODE$$</a>";
            var completeHtmlCode = "";
            for (var addedContent in arrayOfAddedContent) {
                var langCode = arrayOfAddedContent[addedContent][0];
                var content = arrayOfAddedContent[addedContent][1];
                var singleHtmlCode = "";
                if (langCode.trim() == "TR") {
                    $("#txtLanguageContent").val(content);
                }

                var singleHtmlCode = replaceAll("$$LANG_CODE$$", langCode, htmlCodeToAppend);

                completeHtmlCode += singleHtmlCode;
            }
            $(".languageSelection").html($(".languageSelection").html() + completeHtmlCode);
            $("#txtSelectedLanguageCode").val("TR");

            // TR dilinde lang tablosunda kaydı yok demektir, bir sonraki dil atanır default olarak OYA 29.01.2015 TFS NO : 28246
            if ($("#txtLanguageContent").val() == "" && arrayOfAddedContent.length != 0) {
                var otherLangCode = arrayOfAddedContent[0][0];
                $("#txtLanguageContent").val(otherLangCode);
                $("#txtSelectedLanguageCode").val(otherLangCode);
            }

            checkSelected();
        }

        function SetInitialContent() {

            var initialContent = $("#MultiLanguageContentAsText").val();

            SetComboboxItems(parseContentStringAsArray(initialContent));


                        @* var rawModel = @Html.Raw(Json.Encode(@Model));
            $.ajax({
                url: '/MultiLanguage/SetInitialContent/',
                type: 'post',
                dataType: 'json',
                // It is important to set the content type
                // request header to application/json because
                // that's how the client will send the request
                contentType: 'application/json',
                data: JSON.stringify({ viewModel: rawModel }),
                success: function (result) {
                    languageList = result.retModel;
                    var htmlCode = result.headerHTML;
                    for (var key in languageList.listOfInitialContent) {
                        var obj = languageList.listOfInitialContent[key];
                        for (var prop in obj) {
                            // important check that this is objects own property 
                            // not from prototype prop inherited
                            if(obj.hasOwnProperty(prop)){
                                alert(prop + " = " + obj[prop]);
                            }
                        }
                    }
                    $("#languageHolder").html(htmlCode);
                    var dropDown = $("#ddlLanguage").data("kendoComboBox");
                  

                   

                    var dataSource = new kendo.data.DataSource({

                        data : languageList.listOfAllContent

                    });

                    dropDown.setDataSource(dataSource);
                   
                    $("#txtLanguageContent").val(result.defaultText);
                    dropDown.select(0);
                    checkSelected();
                    $("#isValidText").val(result.retModel.isValidText);
                    $('#languageListChecker').val(JSON.stringify(languageList));
                   
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            });*@
        }

        function checkSelected() {

            $(".languageBtn").each(function () {

                $(this).removeClass("btn-primary").addClass("btn-default").removeClass("selected");
            });

            var current = $("#txtSelectedLanguageCode").val();
            current = $.trim(current);

            $("." + current).addClass("selected").addClass("btn-primary").removeClass("btn-default");
        }


    });

</script>
