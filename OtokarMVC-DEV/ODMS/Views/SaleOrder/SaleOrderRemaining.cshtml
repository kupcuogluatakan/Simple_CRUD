@using ODMSModel.SaleOrder
@model ODMSModel.SaleOrder.SaleOrderRemainingFilter
@using ODMSCommon.Resources
@using Kendo.Mvc.Extensions
@{
    ViewBag.Title = CommonUtility.GetResourceValue("SaleOrderRemaining_PageTitle_Index");
}
<style>
    .k-widget.k-tooltip {
        background-color: white;
        color: #090909;
    }

    .tooltip-content {
        background-color: white;
        text-align: left;
        padding: 10px;
    }

        .tooltip-content .bold {
            padding-right: 12px;
        }

    .color-box-wrapper {
        display: inline-block;
        margin: 0 5px;
        text-align: center;
    }

    .color-box {
        border-radius: 15px;
        content: "";
        display: inline-block;
        height: 15px;
        width: 15px;
    }
</style>
@Html.AntiForgeryToken()
<div id="PopupWindow" style="background-color: #EDF1F4 !important" class="hide"></div>
<div id="showSearch">Arama Kriterleri</div>
<div id="searchDiv">
    <div id="searchFields">
        <div class="labelDiv">@Html.LabelFor(v => v.CustomerId)</div>
    <div class="shortTxtDiv">
        @(Html.Kendo().ComboBoxFor(c => c.CustomerId).DataValueField("Value").DataTextField("Text").Placeholder(CommonUtility.GetResourceValue("Global_Display_Choose"))
    .BindTo(ViewBag.CustomerList as List<SelectListItem>).Placeholder(CommonUtility.GetResourceValue("Global_Display_Choose"))
        )
    </div>
        <div class="labelDiv">@Html.LabelFor(v => v.PurchaseOrderType)</div>
        <div class="shortTxtDiv">
            @(Html.Kendo().ComboBoxFor(c => c.PurchaseOrderType).DataValueField("Value").DataTextField("Text").Placeholder(CommonUtility.GetResourceValue("Global_Display_Choose"))
        .BindTo(ViewBag.PurchaseOrderTypeList as List<SelectListItem>).Placeholder(CommonUtility.GetResourceValue("Global_Display_Choose"))
            )
        </div>
        <div class="clearDiv">&nbsp;</div>
    <div class="labelDiv">@Html.LabelFor(v => v.PartCode)</div>
    <div class="shortTxtDiv">@Html.TextBoxFor(v => v.PartCode) </div>

    <div class="labelDiv">@Html.LabelFor(v => v.PartName)</div>
    <div class="shortTxtDiv">@Html.TextBoxFor(v => v.PartName) </div>
    <div class="clearDiv">&nbsp;</div>@*
    <div class="labelDiv">@Html.LabelFor(v => v.BeginDate)</div>
    <div class="shortTxtDiv">@Html.Kendo().DatePickerFor(v => v.BeginDate).Events(e => e.Open("OpenStartDate").Change("OpenEndDate")).Format("dd/MM/yyyy").ParseFormats(new[] { "dd.MM.yyyy" }).HtmlAttributes(new { type = "text", onkeypress = "return false;" })</div>
        <div class="labelDiv">@Html.LabelFor(v => v.EndDate) </div>
    <div class="shortTxtDiv">@Html.Kendo().DatePickerFor(v => v.EndDate).Events(e => e.Open("OpenEndDate").Change("OpenStartDate")).Format("dd/MM/yyyy").ParseFormats(new[] { "dd.MM.yyyy" }).HtmlAttributes(new { type = "text", type = "text", onkeypress = "return false;" })</div>
    <div class="clearDiv">&nbsp;</div>*@ 

        <div class="labelDiv">@Html.LabelFor(v => v.PartType)</div>
        <div class="shortTxtDiv">
            @(Html.Kendo().ComboBoxFor(c => c.PartType).DataValueField("Value").DataTextField("Text").Placeholder(CommonUtility.GetResourceValue("Global_Display_Choose"))
        .BindTo(ViewBag.PartTypeList as List<SelectListItem>).Placeholder(CommonUtility.GetResourceValue("Global_Display_Choose"))
            )
        </div>

        <div class="clearDiv">&nbsp;</div>

        <div class="labelDiv">@Html.LabelFor(v => v.StockTypeId)</div>
        <div class="shortTxtDiv">
            @(Html.Kendo().ComboBoxFor(c => c.StockTypeId).DataValueField("Value").DataTextField("Text").Placeholder(CommonUtility.GetResourceValue("Global_Display_Choose"))
        .BindTo(ViewBag.StockTypeList as List<SelectListItem>).Placeholder(CommonUtility.GetResourceValue("Global_Display_Choose"))
            )
        </div>

        <div class="labelDiv">@Html.LabelFor(v => v.MaxRecordCount)</div>
        <div class="shortTxtDiv">@Html.Kendo().NumericTextBoxFor(v => v.MaxRecordCount).Spinners(false).Format("N0").Decimals(0).Min(1).HtmlAttributes(new { type = "text", style = "width:204px" }) </div>
            

        <div class="clearDiv">&nbsp;</div>
    </div>
</div>
@ODMSHelpers.LinkButton("btnSearch", CommonUtility.GetResourceValue("Global_Display_Search"), "", "", "", CommonValues.PermissionCodes.SaleOrder.SaleOrderRemainingIndex)

<br />
<div class="checkbox"><label>@Html.CheckBox("SelectAll", new { onClick = "SelectAll();" }) @MessageResource.Global_Display_SelectAll</label> </div>

<div class="kendoGridDiv" id="grd">
    <div class="btn-group" style="height:40px;">
        <button class="btn btn-info btnCreateSaleOrderDocument" onclick="CreateSaleOrderDocument(this)">
            <i class="fa fa-check"></i> &nbsp;
            @MessageResource.SaleOrderRemaining_Display_CreateSaleOrderDocument
        </button>
    </div>

    @(Html.Kendo().Grid<SaleOrderRemainingListItem>()
          .Name("SaleOrderRemainingGrid")

          .Columns(columns =>
          {
              columns.Bound(p => p.IsSelected).ClientTemplate("#if(ExistingStockQuantity>0){#" +
                                                              "<input type='checkbox' onchange='selectChange(this);' class='cbSelect' name='IsSelected' />" +
                                                              "#}else{# " +
                                                              "  <input type='checkbox' onchange='selectChange(this);' class='cbSelect' name='IsSelected' disabled='disabled' />" +
                                                              "#}#").Title(CommonUtility.GetResourceValue("Global_Display_Select")).Width(50).Sortable(false);
              columns.Bound(p => p.SaleOrderNumber).Sortable(true);
              columns.Bound(p => p.SaleOrderCreateDate).Format("{0:dd/MM/yyyy}").Sortable(true);
              columns.Bound(p => p.SaleOrderType).Sortable(true);
              columns.Bound(p => p.CustomerName).Sortable(true);
              columns.Bound(p => p.StockType).Sortable(true);
              columns.Bound(p => p.IsOriginal).Sortable(true);
              columns.Bound(p => p.PartCode).Sortable(true);
              columns.Bound(p => p.PartName).Sortable(true);
              columns.Bound(p => p.OnOrderQuantity).Sortable(true);
              columns.Bound(p => p.PlannedQuantity).Sortable(false).EditorTemplateName("NewDecimalRoundedNumericTextboxEditor").HtmlAttributes(new { @class = "bgColor" });
              columns.Bound(p => p.TotalOnOrderQuantity).Sortable(true);
              columns.Bound(p => p.ListPrice).HtmlAttributes(new { style = "text-align:right" }).Sortable(true);
              columns.Bound(p => p.OrderPrice).HtmlAttributes(new { style = "text-align:right" }).Sortable(true);
              columns.Bound(p => p.ConfirmPrice).HtmlAttributes(new { style = "text-align:right" }).Sortable(true);
              columns.Bound(p => p.ListDiscountRatio).HtmlAttributes(new { style = "text-align:right" }).Sortable(true);
              columns.Bound(p => p.AppliedDiscountRatio).Sortable(true);
              columns.Bound(p => p.ExistingStockQuantity).HtmlAttributes(new { @class = "existingStockQuantity" }).Sortable(true);
          })
          .Sortable()
          .Scrollable()
          .Events(e => e.DataBound("onDataBound"))
          .Events(e => e.Edit("onEdit"))
          .Editable(editable => editable.Mode(GridEditMode.InCell))

          .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .PageSize(10)
                                        .ServerOperation(true)
                                        .Read(read => read.Action("ListRemainingSaleOrders", "SaleOrder").Data("Search"))
                                        .Model(model =>
                                        {
                                            model.Id(p => p.SoDetSeqNo);
                                            model.Field(p => p.IsSelected).Editable(false);
                                            model.Field(p => p.SaleOrderNumber).Editable(false);
                                            model.Field(p => p.SaleOrderCreateDate).Editable(false);
                                            model.Field(p => p.SaleOrderType).Editable(false);
                                            model.Field(p => p.StockType).Editable(false);
                                            model.Field(p => p.CustomerName).Editable(false);
                                            model.Field(p => p.IsOriginal).Editable(false);
                                            model.Field(p => p.PartCode).Editable(false);
                                            model.Field(p => p.PartName).Editable(false);
                                            model.Field(p => p.PlannedQuantity).Editable(true);
                                            model.Field(p => p.OnOrderQuantity).Editable(false);
                                            model.Field(p => p.TotalOnOrderQuantity).Editable(false);
                                            model.Field(p => p.ExistingStockQuantity).Editable(false);
                                        })
                                        )

    )
    <div class="btn-group" style="margin-top:10px;">
        <button class="btn btn-info btnCreateSaleOrderDocument" onclick="CreateSaleOrderDocument(this)">
            <i class="fa fa-check"></i> &nbsp;
            @MessageResource.SaleOrderRemaining_Display_CreateSaleOrderDocument
        </button>
    </div>


</div>

@section Scripts
{
    <script>

        function CreateSaleOrderDocument(obj) {

            var items = [];

            $(".btnCreateSaleOrderDocument").addClass("disabled");
            var grid = $('#SaleOrderRemainingGrid').data("kendoGrid");
            var list = grid.dataSource.data();

            for (var i = 0; i < list.length; i++) {
                if (list[i].IsSelected == true) {
                    if (!list[i].PlannedQuantity || list[i].PlannedQuantity == 0) {
                        SetErrorMessage('Planlanan miktar doldurulmalıdır.');
                        $(".btnCreateSaleOrderDocument").removeClass("disabled");
                        return;
                    }
                    items.push({ SoDetSeqNo: list[i].SoDetSeqNo, PlannedQuantity: list[i].PlannedQuantity });
                }
            }

            ControlStockQuants(items,
                function () {
                    $.ajax('@Url.Action("CreateSaleOrderDocument", "SaleOrder")',
                {
                    traditional: true,
                    cache: false,
                    global: true,
                    success: function (json) {
                        console.log(json);
                        $(".btnCreateSaleOrderDocument").removeClass("disabled");
                        if (json.Status == 1)
                            SetSuccessMessage(json.Message);
                        else
                            SetErrorMessage(json.Message);
                        $(".btnCreateSaleOrderDocument").removeClass("disabled");
                        $("#btnSearch").trigger("click");
                    },
                    error: function (xhr) {
                        SetErrorMessage(xhr.responseText);
                    },
                    data: JSON.stringify(items),
                    dataType: "json",
                    method: "post"
                });
                });

        }

        function ControlStockQuants(list, success) {
            $.ajax('@Url.Action("GetSelectedSaleOrderPartsStockQuants", "SaleOrder")',
            {
                traditional: true,
                cache: false,
                ascy: true,
                success: function (json) {
                    if (ParseAndDisplayStockQuantities(json) == true) {
                        if (success)
                            success();
                    }
                },
                error: function (xhr) {
                    SetErrorMessage(xhr.responseText)
                    return false;
                },
                data: JSON.stringify(list),
                dataType: "json",
                method: "post"
            });
        }

        function ParseAndDisplayStockQuantities(json) {
            var retVal = true;
            var grid = $('#SaleOrderRemainingGrid').data("kendoGrid");
            var list = grid.dataSource.data();

            var controlList = [];

            for (var i = 0; i < list.length; i++) {
                if (list[i].IsSelected == true) {
                    $(json).each(function (k, e) {
                        if (list[i].SoDetSeqNo == e.SoDetSeqNo) {
                            AddPartAndQuantityToControlList(controlList, e, list[i].PlannedQuantity);
                            console.log(controlList)


                            for (var j = 0; j < controlList.length; j++) {
                                if (controlList[j].PartId == e.PartId) {
                                    if (controlList[j].Qty <= e.StockQuantity)
                                        $('#SaleOrderRemainingGrid tr:eq("' + (i + 1) + '") .existingStockQuantity').css("background-color", "rgb(134, 216, 200);")
                                    else {
                                        $('#SaleOrderRemainingGrid tr:eq("' + (i + 1) + '") .existingStockQuantity').css("background-color", "rgb(241, 178, 178)")
                                        retVal = false;
                                    }
                                }
                            }
                        }

                    });
                }
            }
            if (retVal == false) {
                SetErrorMessage('Bazı parçaların yeterli stoğu yok.')
                $(".btnCreateSaleOrderDocument").removeClass("disabled");
            }
            return retVal;

        }

        function AddPartAndQuantityToControlList(controlList, e, plannedQuantity) {
            if (controlList.length > 0) {
                var found = false;
                for (var i = 0; i < controlList.length; i++) {
                    if (controlList[i].PartId == e.PartId) {
                        controlList[i].Qty += plannedQuantity;
                        return;
                    }
                }
                controlList.push({ PartId: e.PartId, Qty: plannedQuantity });
                return;
            } else {
                controlList.push({ PartId: e.PartId, Qty: plannedQuantity });
            }
        }


        function SelectAll() {
            var checked = $('#SelectAll').prop('checked');
            var grid = $('#SaleOrderRemainingGrid').data("kendoGrid");
            var list = grid.dataSource.data();
            for (var i = 0; i < list.length; i++) {
                if (list[i].ExistingStockQuantity > 0)
                    list[i].IsSelected = checked;
            }
            $(".cbSelect:enabled", "#SaleOrderRemainingGrid").prop("checked", checked);
        }

        function onDataBound() {
            $("a.kendotooltip").each(function (i, e) {
                toolTipIt(e);
            });
        }

        function onChange(e) {
            var grid = $('#SaleOrderRemainingGrid').data("kendoGrid");

            var selectedItemUId = this.element.parent().closest('tr').attr('data-uid');
            var item = grid.dataSource.getByUid(selectedItemUId);

            var newValue = this.value() == 0 ? 1 : this.value();
            if (newValue > item.OnOrderQuantity)
                newValue = item.OnOrderQuantity;
            this.value(newValue);
            item.set("PlannedQuantity", newValue);
        }

        function selectChange(obj) {
            var grid = $('#SaleOrderRemainingGrid').data("kendoGrid");
            var row = $(obj).closest("tr");
            var item = grid.dataItem(row);
            item.IsSelected = $(obj).prop("checked");
        }

        function onEdit(e) {
            var data = e.model;
            var oldqty = data.PlannedQuantity;
            console.log(data);
            if (data.IsSelected == false) {
                this.closeCell();
            }
            if (data.PlannedQuantity == 0) {

            }

            e.preventDefault();
        }

        function OpenStartDate() {
            var dateStart = $("#BeginDate").data("kendoDatePicker");
            var dateEnd = $("#EndDate").data("kendoDatePicker");
            if ($("#EndDate").val()) {
                dateStart.max(dateEnd.value());
            } else {
                dateStart.max(new Date(3000, 0, 1));
            }
        }

        function OpenEndDate() {
            var dateStart = $("#BeginDate").data("kendoDatePicker");
            var dateEnd = $("#EndDate").data("kendoDatePicker");
            if ($("#BeginDate").val()) {
                dateEnd.min(dateStart.value());
            } else {
                dateEnd.min(new Date(1900, 0, 1));
            }
        }

        function Search() {
            return {
                CustomerId: $("#CustomerId").val(),
                PurchaseOrderType: $("#PurchaseOrderType").val(),
                PartCode: $("#PartCode").val(),
                PartName: $("#PartName").val(),
                BeginDate: $("#BeginDate").val(),
                EndDate: $("#EndDate").val(),
                PartType: $("#PartType").val(),
                MaxRecordCount: $("#MaxRecordCount").val(),
                StockTypeId: $("#StockTypeId").val()
            };
        }

        $(document).ready(function () {

            $("body").delegate("#btnSearch", "click", function (e) {
                var grid = $('#SaleOrderRemainingGrid').data('kendoGrid');
                grid.dataSource.page(1);

            });
            $("body").delegate("#showSearch", "click", function (e) {
                var IsVisible = Boolean($(this).hasClass("searchVisible"));

                if (!IsVisible) {
                    $(this).html('@CommonUtility.GetResourceValue("Global_Display_Hide_Search_Criteria")');
                    $(this).addClass("searchVisible");
                    $("#searchDiv").show("slow");
                } else {
                    $(this).html('@CommonUtility.GetResourceValue("Global_Display_Search_Criteria")');
                    $(this).removeClass("searchVisible");
                    $("#searchDiv").hide("slow");
                }
            });
            @{
                if (Model != null)
                {
                    @Html.Raw("$('#showSearch').trigger('click');")
                }


            }
        });
        function toolTipIt(it) {
            var partId = $(it).data("partid");
            $(it).kendoTooltip({
                content: {
                    url: "@Url.Action("GetChangedPartInfo","SparePart")?partId=" + partId
                },
                width: 250,
                height: 100,
                position: "top",
            });
        }
        function openpopup(partCode) {
            $('#PopupWindow').kwnd('@Url.Action("SparePartAssemblePopup","SparePartAssemble")?partCode=' + partCode, '@Html.Raw(MessageResource.Global_Display_ChangedParts)',
                       {
                           iframe: false,
                           width: 1200,
                           height: 450,
                           onClose: function () {
                               $("#PopupWindow").empty();
                           }
                       });
            $('#PopupWindow').removeClass("hide");
            OpenWindow($('#PopupWindow'));
        }

    </script>
}



