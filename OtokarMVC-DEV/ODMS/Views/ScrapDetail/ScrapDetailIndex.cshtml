@using ODMSCommon.Resources
@using ODMSCommon.Security
@model ODMSModel.ScrapDetail.ScrapDetailViewModel
<br />
 
@Html.AntiForgeryToken()
<script> function Search() {
     return {
         ScrapId: $('#ScrapId').val(),
         Barcode: $('#Barcode').val(),
         DealerId:$('#DealerId').val()
     };
 }

    $(document).ready(function() {
        ScrapReasonChanged();

        var scrapId = '@Model.ScrapId';
        if (scrapId == '0')
            $('#divApproveCancelButtons').hide();
        else
            $('#divApproveCancelButtons').show();
    
        $('#ApproveScrapDetail').click(function() {
            var grid = $('#ScrapDetailGrid').data('kendoGrid');
            if (grid.dataSource.hasChanges()) {
                SetErrorMessage('@MessageResource.ScrapDetail_Error_NotSaved');
            } else {
                var strSelectedIds = "";
                var ischecked = grid.tbody.find(":checked");
                $.each(ischecked, function() {
                    var scrapDetailId = $(this).attr("id");
                    if (strSelectedIds != "") {
                        strSelectedIds += "," + scrapDetailId;
                    } else {
                        strSelectedIds += scrapDetailId;
                    }
                });

                if (strSelectedIds.length == 0) {
                    SetErrorMessage('@MessageResource.ScrapDetail_Error_RowNotSelected');
            } else {
                var token = $('input[name="__RequestVerificationToken"]').val();
                
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("ApproveScrapDetail", "ScrapDetail")",
                    data: { scrapDetailIdList: strSelectedIds, scrapId: scrapId,"__RequestVerificationToken": token  },
                    traditional: true,
                    success: function(result) {
                        if (result.Status == 0)
                            SetErrorMessage(result.Message);
                        else {
                            var grid = $('#ScrapDetailGrid').data('kendoGrid');
                            grid.dataSource.read();
                            SetSuccessMessage(result.Message);
                        }
                    },
                    dataType: "json"
                });
            }
        }
        });

        $('#CancelScrapDetail').click(function() {
            var grid = $('#ScrapDetailGrid').data('kendoGrid');
            if (grid.dataSource.hasChanges()) {
                SetErrorMessage('@MessageResource.ScrapDetail_Error_NotSaved');
            } else {
                var strSelectedIds = "";
                var ischecked = grid.tbody.find(":checked");
                $.each(ischecked, function() {
                    var scrapDetailId = $(this).attr("id");
                    if (strSelectedIds != "") {
                        strSelectedIds += "," + scrapDetailId;
                    } else {
                        strSelectedIds += scrapDetailId;
                    }
                });
                if (strSelectedIds.length == 0) {
                    SetErrorMessage('@MessageResource.ScrapDetail_Error_RowNotSelected');
            } else {
                var token = $('input[name="__RequestVerificationToken"]').val();
                
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("CancelScrapDetail", "ScrapDetail")",
                    data: { scrapDetailIdList: strSelectedIds, scrapId: scrapId, "__RequestVerificationToken": token  },
                    traditional: true,
                    success: function(result) {
                        if (result.Status == 0)
                            SetErrorMessage(result.Message);
                        else {
                            var grid = $('#ScrapDetailGrid').data('kendoGrid');
                            grid.dataSource.read();
                            SetSuccessMessage(result.Message);
                        }
                    },
                    dataType: "json"
                });
            }
        }
        });

        $("#scrapForm").on('submit', function(e) {
            e.preventDefault();
            var isValid = true;
            var errMsg = "";
            if ($('#ScrapDate').val() == "") {
                SetErrorMessage('@MessageResource.Scrap_Display_ScrapDate' + '@MessageResource.ScrapDetail_Error_NoSelection');
                isValid = false;
            }
            if ($('#DealerId').val() == 0) {
                SetErrorMessage('@MessageResource.Scrap_Display_DealerName' + '@MessageResource.ScrapDetail_Error_NoSelection');
            isValid = false;
            }
            if ($('#ScrapReasonId').val() == '') {
                SetErrorMessage('@MessageResource.Scrap_Display_ScrapReasonName' + '@MessageResource.ScrapDetail_Error_NoSelection');
                isValid = false;
            } else {
                if ($('#divReasonDesc').is(':visible') && $('#ScrapReasonDesc').val() == '') {
                    SetErrorMessage('@MessageResource.Scrap_Display_ScrapReasonDesc' + '@MessageResource.ScrapDetail_Error_NotEntered');
                    isValid = false;
                }
            }
            if (isValid) {
                var dataSource = $('#ScrapDetailGrid').data().kendoGrid.dataSource;
                var count = dataSource.total();
                if (count == 0) {
                    errMsg = '@MessageResource.ScrapDetail_Error_NoDetail';
                    isValid = false;
                } else {
                    for (var i = 0; i < count; i++) {
                        var item = dataSource.data()[i];
                        if (item.StockTypeId == '' || item.StockTypeId == 0 || item.StockTypeId == null) {
                            errMsg = '@MessageResource.ScrapDetail_Error_NoStockType';
                            isValid = false;
                        }
                        if (item.PartId == '' || item.PartId == 0 || item.PartId == null) {
                            errMsg = '@MessageResource.ScrapDetail_Error_NoPart';
                            isValid = false;
                        }
                        if (item.WarehouseId == '' || item.WarehouseId == 0 || item.WarehouseId == null) {
                            errMsg = '@MessageResource.ScrapDetail_Error_NoWarehouse'
                            isValid = false;
                        }
                        if (item.RackId == '' || item.RackId == 0 || item.RackId == null) {
                            errMsg = '@MessageResource.ScrapDetail_Error_NoRack';
                            isValid = false;
                        }
                        if (item.Quantity > item.StockQuantity) {
                            errMsg = '@MessageResource.ScrapDetail_Error_QuantityBiggerThanStockQuantity';
                            isValid = false;
                            $('tr[data-uid="' + item.uid + '"] ').css("background-color", "lightPink");
                        }
                        var e = /^\d{0,3}(\,\d{0,2})?$/;
                        var f = /^\d{0,3}(\.\d{0,2})?$/;
                        if ((!e.test(item.Quantity) && '@UICulture' == "tr-TR") || (!f.test(item.Quantity) && '@UICulture' == "en-US")) {
                            errMsg = '@MessageResource.ScrapDetail_Error_QuantityFormat';
                            isValid = false;
                            $('tr[data-uid="' + item.uid + '"] ').css("background-color", "lightPink");
                        }
                    }
                }

                if (isValid) {
                    var isAllQuantityFilled = false;
                    var isQuantityFilled = false;
                    for (var i = 0; i < count; i++) {
                        var item = dataSource.data()[i];
                        if (item.ScrapId == 0) {
                            if (item.Quantity != 0) {
                                isQuantityFilled = true;
                            }
                        } else {
                            if (item.Quantity != 0) {
                                isAllQuantityFilled = true;
                            }
                        }
                    }

                    if ((isAllQuantityFilled && item.ScrapId != 0) || (isQuantityFilled && item.ScrapId == 0)) {
                        $.ajax({
                            type: $(this).prop('method'),
                            url: $(this).prop('action'),
                            data: $(this).serialize()
                        })
                            .success(function(result) {
                                if (result.success) {
                                    SaveChanges(result.scrapId);
                                    SetSuccessMessage('@MessageResource.Global_Display_Success');
                                    $('#ScrapId').val(result.scrapId);
                                    var grid = $('#ScrapGrid').data('kendoGrid');
                                    grid.dataSource.page(1);
                                    $('#Barcode').val('');
                                    var detailGrid = $('#ScrapDetailGrid').data('kendoGrid');
                                    detailGrid.dataSource.page(1);
                                    $('#divApproveCancelButtons').show();
                                    loadTabs(result.scrapId);
                                }
                            });
                    } else {
                        if (!isAllQuantityFilled && item.ScrapId != 0) {
                            SetErrorMessage('@MessageResource.ScrapDetail_Warning_ZeroValues');
                        }
                        if (!isQuantityFilled && item.ScrapId == 0) {
                            SetErrorMessage('@MessageResource.ScrapDetail_Warning_NewRecordeWith0Value');
                        }
                    }
                } else {
                    SetErrorMessage(errMsg);
                }
            }
        });
    });

function DeleteScrapDetail(sdId) {
    var grid = $('#ScrapDetailGrid').data('kendoGrid');
    var token = $('input[name="__RequestVerificationToken"]').val();
        
    DeleteConfirm(function() {
        if (@Model.ScrapId != 0) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteScrapDetail", "ScrapDetail")",
                    data: { scrapDetailId: sdId,"__RequestVerificationToken": token  },
                    traditional: true,
                    success: function(result) {
                        if (result.Status == 0)
                            SetErrorMessage(result.Message);
                        else {
                            grid.dataSource.read();
                            SetSuccessMessage(result.Message);
                        }
                    },
                    dataType: "json"
                });
            } else {
                var dataSource = grid.dataSource;
                var count = dataSource.total();
                for (var i = 0; i < count; i++) {
                    var item = dataSource.data()[i];
                    if (item.ScrapDetailId == sdId) {
                        dataSource.remove(item);
                        break;
                    }
                }
            }
    });
    }

    function AddPart() {
        var grid = $('#ScrapDetailGrid').data('kendoGrid');
        grid.dataSource.read();
    }

    function SaveChanges(sId) {
        if (sId != 0) {
            var grid = $("#ScrapDetailGrid").data("kendoGrid");
            var count = $('#ScrapDetailGrid').data().kendoGrid.dataSource.total();
            for (var i = 0; i < count; i++) {
                var firstItem = $('#ScrapDetailGrid').data().kendoGrid.dataSource.data()[i];
                firstItem.set("ScrapId", sId);
            }
            grid.saveChanges();
        }
    }

    function onRequestEnd(e) {
        if (e.type == "create" || e.type == "update") {
            var grid = $("#ScrapDetailGrid").data("kendoGrid");
            if (e.response == "") {
                SetSuccessMessage('@MessageResource.Global_Display_Success');
            grid.dataSource.read();
        } else {
            SetErrorMessage(e.response);
            grid.cancelChanges();
        }
    }
    if (e.type == "read") {
        if (e.response.ErrorMessage.length != 0) {
            SetErrorMessage(e.response.ErrorMessage);
        }
    }
}

function CheckBoxVisibility(isNew, cancelUserId, scrapDetailId) {
    if (isNew || cancelUserId != 0)
        return "";
    else
        return "<div style='text-align:center'>" + "<input type='checkbox' id=" + scrapDetailId + " value=" + scrapDetailId + "></input>"+"</div>";
}

function CloseCellEditable(e) {
    var fieldName = e.container.find("input").attr("name");
    var data = e.model;
    if ((data.ConfirmUserId != 0 || data.CancelUserId != 0) && (data.ConfirmUserId != null || data.CancelUserId != null)) {
        this.closeCell();
    }
    else
    {
        if(fieldName != "Quantity") {
            this.closeCell();
        }
    }

    if (fieldName === "StockQuantity") {
        this.closeCell();
    }

    e.preventDefault();
}

function onSelectFile(e) {
    var files = e.files;
    $.each(files, function() {
        if (this.size > 10240000) {
            SetErrorMessage('@MessageResource.Global_Warning_FileSize10MB');
                e.preventDefault();
            }

    });
    }

    function OnDatabound(aQty, coUser, caUser, sdId) {
        if ((coUser != 0 || caUser != 0) && (coUser != null || caUser != null)) {
            return "<div>" + aQty + " </div>";
        }
        else
        {
            if (sdId == 0) {
                return "<div>" + aQty + " </div>";
            }
            else
            {
                return "<div style='background: lightgreen'>" + aQty + " </div>";
            }
        }
    }

    UpdateFileName = function (e) {
        return $.map(e.files, function (file) {
            var info = file.name;

            if (file.size > 0) {
                info += " (" + Math.ceil(file.size / 1024) + " KB)";
            }
            $('#DocName').val(info);
            $('#divFileInfo').show();
            $(".k-upload-files.k-reset").find("li").parent().remove();
            var grid = $('#ScrapGrid').data('kendoGrid');
            grid.dataSource.page(1);
        });
    };

    function RemoveFile() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("RemoveFile", "ScrapDetail")",
            data: { scrapId : @Model.ScrapId },
            traditional: true,
            success: function (result) {
                $('#DocName').val('');
                $('#divFileInfo').hide();
                var grid = $('#ScrapGrid').data('kendoGrid');
                grid.dataSource.page(1);
            },
            dataType: "json"
        });
    }
    function ScrapReasonChanged() {
        if (parseInt($('#ScrapReasonId').val()) == 4) {
            var token = $('input[name="__RequestVerificationToken"]').val();
            $.post("@Url.Action("ScrapReasonIsDescRequired", "ScrapDetail")", {
                scrapReasonId: $('#ScrapReasonId').val(),
                "__RequestVerificationToken": token
            }, function(json) {
                if (json.IsReasonDescRequired) {
                    $('#divReasonDesc').show();
                } else {
                    $('#divReasonDesc').hide();
                }
            }, "JSON");
        } else {
            $('#divReasonDesc').hide();
        }
    }
    
</script>
@using (Html.BeginForm("ScrapDetailIndex", "ScrapDetail", FormMethod.Post, new { id = "scrapForm", enctype = "multipart/form-data" }))
{
    <div class="labelDiv">@Html.LabelFor(v => v.DealerName)</div>
    <div class="shortTxtDiv">
        @Html.Kendo().ComboBoxFor(v => v.DealerId).DataTextField("Text").DataValueField("Value").BindTo(ViewBag.DealerList as List<SelectListItem>).Placeholder(MessageResource.Global_Display_Choose).Enable(!UserManager.UserInfo.IsDealer)
    </div>
    <div class="labelDiv">@Html.LabelFor(v => v.ScrapDate)</div>
    <div class="shortTxtDiv">@Html.Kendo().DatePickerFor(v => v.ScrapDate).Max(DateTime.Now).Min(DateTime.Now.AddDays(-7)).Format("dd/MM/yyyy").ParseFormats(new[] { "dd.MM.yyyy" }).HtmlAttributes(new { type = "text" })
    </div>
    <div class="clearDiv">&nbsp;</div>
    if (Model.ScrapId != 0)
    {
    <div class="labelDiv">@Html.LabelFor(v => v.DocName)</div>
    <div class="shortTxtDiv">
        @(Html.Kendo().Upload()
                  .Name("file")
                  .HtmlAttributes(new { title = MessageResource.Global_Display_Select })
                  .Messages(m => m.Select(MessageResource.Global_Display_Select))
                  .Multiple(false)
                  .Async(a => a
                                  .Save("SaveFile", "ScrapDetail", new { scrapId = @Model.ScrapId })
                                  .AutoUpload(true)
                  )
                  .Events(e => e.Select("onSelectFile"))
                  .Events(events => events.Success("UpdateFileName"))
                  )
        <div id="divFileInfo">
            @if (Model.DocName != "")
            {
                <a class="k-link" href="@Url.Action("DownloadUploadedFile", "ScrapDetail", new { docId = Model.DocId })">
                    <label style="cursor: pointer" class="label label-danger">@Model.DocName - @MessageResource.Global_Display_Download</label>
                </a>

                <a href="javascript:void(0);" onclick=" RemoveFile(); ">@MessageResource.Global_Display_DeleteFile</a>
            }
        </div>
    </div>
    <div class="clearDiv">&nbsp;</div>
    }
    <div class="clearDiv">&nbsp;</div>
    <div class="labelDiv">@Html.LabelFor(v => v.ScrapReasonName)</div>
    <div class="shortTxtDiv">
        @Html.Kendo().ComboBoxFor(v => v.ScrapReasonId).DataTextField("Text").DataValueField("Value").Events(e => e.Change("ScrapReasonChanged")).BindTo(ViewBag.ScrapReasonList as List<SelectListItem>).Placeholder(MessageResource.Global_Display_Choose)
    </div>
    <div id="divReasonDesc">
        <div class="labelDiv">@Html.LabelFor(v => v.ScrapReasonDesc)</div>
        <div class="shortTxtDiv">@Html.TextAreaFor(v => v.ScrapReasonDesc)@Html.ValidationMessageFor(v => v.ScrapReasonDesc)</div>
    </div>
    <div class="clearDiv">&nbsp;</div>
    <div class="labelDiv">@Html.LabelFor(v => v.Barcode)</div>
    <div class="shortTxtDiv">@Html.TextBoxFor(v => v.Barcode)@Html.ValidationMessageFor(v => v.Barcode)
        @ODMSHelpers.Button("btnAddPart", CommonUtility.GetResourceValue("ScrapDetail_Display_AddPart"), CommonValues.PermissionCodes.ScrapDetail.ScrapDetailCreate, "ScrapDetailCreate", "AddPart();", false)

    </div>
    <div class="clearDiv">&nbsp;</div>
    <div id="divApproveCancelButtons">
        @ODMSHelpers.Button("ApproveScrapDetail", CommonUtility.GetResourceValue("ScrapDetail_Display_ApproveScrap"), CommonValues.PermissionCodes.ScrapDetail.ScrapDetailUpdate, "ApproveScrapDetail", "", false)
        @ODMSHelpers.Button("CancelScrapDetail", CommonUtility.GetResourceValue("ScrapDetail_Display_CancelScrap"), CommonValues.PermissionCodes.ScrapDetail.ScrapDetailUpdate, "CancelScrapDetail", "", false)
    </div>
    <div class="kendoGridDiv" id="grd">
        @(Html.Kendo().Grid<ODMSModel.ScrapDetail.ScrapDetailListModel>()
              .Name("ScrapDetailGrid")
              .Columns(columns =>
                  {
                      columns.Bound(p => p.ScrapDetailId).ClientTemplate("#=CheckBoxVisibility(IsNew, CancelUserId, ScrapDetailId)#").Width(30).Sortable(false);
                      columns.Bound(o => o.ScrapDetailId).ClientTemplate("<center><a href='javascript:void(0);' frameTitle='" + CommonUtility.GetResourceValue("Scrap_PageTitle_Delete") + "' onclick='DeleteScrapDetail(#=ScrapDetailId#);'><img class='iconLink' src='" + Url.Content("~/Images/delete.png") + "'/></a></center>").Title(CommonUtility.GetResourceValue("Global_Display_Delete")).Width(30).Sortable(false).Visible(ODMSHelpers.UserHasPermission(CommonValues.PermissionCodes.ScrapDetail.ScrapDetailDelete));
                      columns.Bound(p => p.PartCode).Width(80).Sortable(true);
                      columns.Bound(p => p.PartName).Width(100).Sortable(true);
                      columns.Bound(p => p.StockTypeName).Width(40).Sortable(true);
                      columns.Bound(p => p.WarehouseName).Width(40).Sortable(true);
                      columns.Bound(p => p.RackName).Width(40).Sortable(true);
                      columns.Bound(p => p.Unit).Width(30).Sortable(true);
                      columns.Bound(p => p.StockQuantity).Sortable(true).Width(30).Format("{0:n}");
                      columns.Bound(c => c.Quantity).Sortable(true).Width(30).Format("{0:n}").ClientTemplate("#= OnDatabound(Quantity, ConfirmUserId, CancelUserId, ScrapDetailId)#");
                      columns.Bound(p => p.ConfirmUserName).Width(50).Sortable(true);
                      columns.Bound(p => p.CancelUserName).Width(50).Sortable(true);
                  })
              .Sortable()
              .Scrollable()
              .Selectable(selectable => selectable
                                            .Mode(GridSelectionMode.Single)
                                            .Type(GridSelectionType.Cell))
              .Editable(editable => editable.Mode(GridEditMode.InCell))
              .Events(e => e.Edit("CloseCellEditable"))
              .DataSource(dataSource => dataSource
                                            .Ajax()
                                            .Events(e => e.RequestEnd("OnRequestEnd"))
                                            .Batch(true)
                                            .PageSize(10)
                                            .Read(read => read.Action("ListScrapDetail", "ScrapDetail").Data("Search"))
                                            .Model(
                                                model =>
                                                {
                                                    model.Id(p => p.ScrapDetailId);
                                                    model.Field(p => p.ScrapDetailId).Editable(false);
                                                    model.Field(p => p.PartId).DefaultValue(0);
                                                    model.Field(p => p.Unit).Editable(false);
                                                    model.Field(p => p.ConfirmUserName).Editable(false);
                                                    model.Field(p => p.CancelUserName).Editable(false);
                                                })
                                            .Update(update => update.Action("ScrapDetailSave", "ScrapDetail").Type(HttpVerbs.Post))
                                            .Events(e => e.RequestEnd("onRequestEnd"))
              ))
    </div>
    @Html.HiddenFor(v => v.ScrapId)
    <div class="clearDiv">&nbsp;</div>
    @ODMSHelpers.Button("Save", CommonUtility.GetResourceValue("Global_Display_Save"), CommonValues.PermissionCodes.ScrapDetail.ScrapDetailCreate, "UploadExcel")
}